
C:\Users\Patrik Bakyta\Documents\GitHub\VRS\F4_UART_ADC_DMA_TIMER_JOYSTICK\Debug\F4_UART_ADC_DMA_TIMER_JOYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002054  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080021dc  080021dc  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080021dc  080021dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000040  20000000  080021e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
  7 .bss          00000038  20000040  20000040  00020040  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000078  20000078  00020040  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006958  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f2f  00000000  00000000  000269c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000960  00000000  00000000  000278f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a8  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002d58  00000000  00000000  00028b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002fe3  00000000  00000000  0002b858  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002e83b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028d8  00000000  00000000  0002e8bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00031194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021c4 	.word	0x080021c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	080021c4 	.word	0x080021c4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]
 80009bc:	230f      	movs	r3, #15
 80009be:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	78db      	ldrb	r3, [r3, #3]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d038      	beq.n	8000a3a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <NVIC_Init+0xbc>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	43db      	mvns	r3, r3
 80009ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	f1c3 0304 	rsb	r3, r3, #4
 80009dc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80009de:	7b7a      	ldrb	r2, [r7, #13]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	fa42 f303 	asr.w	r3, r2, r3
 80009e6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	785b      	ldrb	r3, [r3, #1]
 80009ec:	461a      	mov	r2, r3
 80009ee:	7bbb      	ldrb	r3, [r7, #14]
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	789a      	ldrb	r2, [r3, #2]
 80009fa:	7b7b      	ldrb	r3, [r7, #13]
 80009fc:	4013      	ands	r3, r2
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	011b      	lsls	r3, r3, #4
 8000a0a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a0c:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <NVIC_Init+0xc0>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	7bfa      	ldrb	r2, [r7, #15]
 8000a16:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <NVIC_Init+0xc0>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	095b      	lsrs	r3, r3, #5
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f003 031f 	and.w	r3, r3, #31
 8000a2e:	2101      	movs	r1, #1
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a38:	e00f      	b.n	8000a5a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a3a:	490c      	ldr	r1, [pc, #48]	; (8000a6c <NVIC_Init+0xc0>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	095b      	lsrs	r3, r3, #5
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	f003 031f 	and.w	r3, r3, #31
 8000a4e:	2201      	movs	r2, #1
 8000a50:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a52:	f100 0320 	add.w	r3, r0, #32
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000a74:	2101      	movs	r1, #1
 8000a76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a7a:	f000 fc35 	bl	80012e8 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a84:	f000 fc30 	bl	80012e8 <RCC_APB2PeriphResetCmd>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aae:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	791b      	ldrb	r3, [r3, #4]
 8000ab4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000aba:	4313      	orrs	r3, r2
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <ADC_Init+0xa8>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000ade:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000ae4:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	795b      	ldrb	r3, [r3, #5]
 8000aea:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000aec:	4313      	orrs	r3, r2
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b06:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	7d1b      	ldrb	r3, [r3, #20]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	7afb      	ldrb	r3, [r7, #11]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000b16:	7afb      	ldrb	r3, [r7, #11]
 8000b18:	051b      	lsls	r3, r3, #20
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	c0fff7fd 	.word	0xc0fff7fd

08000b38 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <ADC_CommonInit+0x48>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <ADC_CommonInit+0x4c>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b5a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000b60:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000b66:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <ADC_CommonInit+0x48>)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6053      	str	r3, [r2, #4]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40012300 	.word	0x40012300
 8000b84:	fffc30e0 	.word	0xfffc30e0

08000b88 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	f043 0201 	orr.w	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000ba6:	e005      	b.n	8000bb4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f023 0201 	bic.w	r2, r3, #1
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	4608      	mov	r0, r1
 8000bca:	4611      	mov	r1, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4603      	mov	r3, r0
 8000bd0:	70fb      	strb	r3, [r7, #3]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	70bb      	strb	r3, [r7, #2]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	2b09      	cmp	r3, #9
 8000be6:	d923      	bls.n	8000c30 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	f1a3 020a 	sub.w	r2, r3, #10
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000c0c:	7879      	ldrb	r1, [r7, #1]
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	f1a3 020a 	sub.w	r2, r3, #10
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	e01e      	b.n	8000c6e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000c36:	78fa      	ldrb	r2, [r7, #3]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2207      	movs	r2, #7
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000c50:	7879      	ldrb	r1, [r7, #1]
 8000c52:	78fa      	ldrb	r2, [r7, #3]
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000c6e:	78bb      	ldrb	r3, [r7, #2]
 8000c70:	2b06      	cmp	r3, #6
 8000c72:	d821      	bhi.n	8000cb8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c78:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000c7a:	78bb      	ldrb	r3, [r7, #2]
 8000c7c:	1e5a      	subs	r2, r3, #1
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	221f      	movs	r2, #31
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	4013      	ands	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000c96:	78f9      	ldrb	r1, [r7, #3]
 8000c98:	78bb      	ldrb	r3, [r7, #2]
 8000c9a:	1e5a      	subs	r2, r3, #1
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000cb6:	e047      	b.n	8000d48 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000cb8:	78bb      	ldrb	r3, [r7, #2]
 8000cba:	2b0c      	cmp	r3, #12
 8000cbc:	d821      	bhi.n	8000d02 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000cc4:	78bb      	ldrb	r3, [r7, #2]
 8000cc6:	1fda      	subs	r2, r3, #7
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	221f      	movs	r2, #31
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000ce0:	78f9      	ldrb	r1, [r7, #3]
 8000ce2:	78bb      	ldrb	r3, [r7, #2]
 8000ce4:	1fda      	subs	r2, r3, #7
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d00:	e022      	b.n	8000d48 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d06:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000d08:	78bb      	ldrb	r3, [r7, #2]
 8000d0a:	f1a3 020d 	sub.w	r2, r3, #13
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	221f      	movs	r2, #31
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4013      	ands	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000d26:	78f9      	ldrb	r1, [r7, #3]
 8000d28:	78bb      	ldrb	r3, [r7, #2]
 8000d2a:	f1a3 020d 	sub.w	r2, r3, #13
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d006      	beq.n	8000d94 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000d92:	e005      	b.n	8000da0 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
  }
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000dca:	e005      	b.n	8000dd8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
  }
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <DMA_Init+0xac>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e0e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e1a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e26:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e38:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f023 0307 	bic.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60da      	str	r2, [r3, #12]
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	f01c803f 	.word	0xf01c803f

08000e94 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f043 0201 	orr.w	r2, r3, #1
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000eb2:	e005      	b.n	8000ec0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f023 0201 	bic.w	r2, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e076      	b.n	8000fd6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d165      	bne.n	8000fd0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	401a      	ands	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	4619      	mov	r1, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	791b      	ldrb	r3, [r3, #4]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d003      	beq.n	8000f42 <GPIO_Init+0x76>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	791b      	ldrb	r3, [r3, #4]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d12e      	bne.n	8000fa0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2103      	movs	r1, #3
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	401a      	ands	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	4619      	mov	r1, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	401a      	ands	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	799b      	ldrb	r3, [r3, #6]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2103      	movs	r1, #3
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	79db      	ldrb	r3, [r3, #7]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d985      	bls.n	8000ee8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000fdc:	bf00      	nop
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001000:	787a      	ldrb	r2, [r7, #1]
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	b29b      	uxth	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	08db      	lsrs	r3, r3, #3
 800101c:	b29b      	uxth	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	210f      	movs	r1, #15
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	ea02 0103 	and.w	r1, r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f100 0208 	add.w	r2, r0, #8
 8001042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	08db      	lsrs	r3, r3, #3
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	b29b      	uxth	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <RCC_HSICmd+0x1c>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	42470000 	.word	0x42470000

0800109c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <RCC_SYSCLKConfig+0x34>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f023 0303 	bic.w	r3, r3, #3
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <RCC_SYSCLKConfig+0x34>)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6093      	str	r3, [r2, #8]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40023800 	.word	0x40023800

080010d4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	2302      	movs	r3, #2
 80010f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80010f4:	4b48      	ldr	r3, [pc, #288]	; (8001218 <RCC_GetClocksFreq+0x144>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b04      	cmp	r3, #4
 8001102:	d007      	beq.n	8001114 <RCC_GetClocksFreq+0x40>
 8001104:	2b08      	cmp	r3, #8
 8001106:	d009      	beq.n	800111c <RCC_GetClocksFreq+0x48>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d13f      	bne.n	800118c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a43      	ldr	r2, [pc, #268]	; (800121c <RCC_GetClocksFreq+0x148>)
 8001110:	601a      	str	r2, [r3, #0]
      break;
 8001112:	e03f      	b.n	8001194 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a42      	ldr	r2, [pc, #264]	; (8001220 <RCC_GetClocksFreq+0x14c>)
 8001118:	601a      	str	r2, [r3, #0]
      break;
 800111a:	e03b      	b.n	8001194 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800111c:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <RCC_GetClocksFreq+0x144>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001124:	0d9b      	lsrs	r3, r3, #22
 8001126:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001128:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <RCC_GetClocksFreq+0x144>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001130:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00d      	beq.n	8001154 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001138:	4a39      	ldr	r2, [pc, #228]	; (8001220 <RCC_GetClocksFreq+0x14c>)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <RCC_GetClocksFreq+0x144>)
 8001142:	6859      	ldr	r1, [r3, #4]
 8001144:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001148:	400b      	ands	r3, r1
 800114a:	099b      	lsrs	r3, r3, #6
 800114c:	fb03 f302 	mul.w	r3, r3, r2
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e00c      	b.n	800116e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001154:	4a31      	ldr	r2, [pc, #196]	; (800121c <RCC_GetClocksFreq+0x148>)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	fbb2 f2f3 	udiv	r2, r2, r3
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <RCC_GetClocksFreq+0x144>)
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001164:	400b      	ands	r3, r1
 8001166:	099b      	lsrs	r3, r3, #6
 8001168:	fb03 f302 	mul.w	r3, r3, r2
 800116c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <RCC_GetClocksFreq+0x144>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001176:	0c1b      	lsrs	r3, r3, #16
 8001178:	3301      	adds	r3, #1
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	fbb2 f2f3 	udiv	r2, r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
      break;
 800118a:	e003      	b.n	8001194 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a23      	ldr	r2, [pc, #140]	; (800121c <RCC_GetClocksFreq+0x148>)
 8001190:	601a      	str	r2, [r3, #0]
      break;
 8001192:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <RCC_GetClocksFreq+0x144>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800119c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80011a4:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <RCC_GetClocksFreq+0x150>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	40da      	lsrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <RCC_GetClocksFreq+0x144>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80011c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	0a9b      	lsrs	r3, r3, #10
 80011ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80011cc:	4a15      	ldr	r2, [pc, #84]	; (8001224 <RCC_GetClocksFreq+0x150>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	40da      	lsrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <RCC_GetClocksFreq+0x144>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80011ec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	0b5b      	lsrs	r3, r3, #13
 80011f2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <RCC_GetClocksFreq+0x150>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	40da      	lsrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	60da      	str	r2, [r3, #12]
}
 800120c:	bf00      	nop
 800120e:	3724      	adds	r7, #36	; 0x24
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40023800 	.word	0x40023800
 800121c:	00f42400 	.word	0x00f42400
 8001220:	017d7840 	.word	0x017d7840
 8001224:	20000000 	.word	0x20000000

08001228 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800123a:	490a      	ldr	r1, [pc, #40]	; (8001264 <RCC_AHB1PeriphClockCmd+0x3c>)
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <RCC_AHB1PeriphClockCmd+0x3c>)
 800123e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4313      	orrs	r3, r2
 8001244:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001246:	e006      	b.n	8001256 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001248:	4906      	ldr	r1, [pc, #24]	; (8001264 <RCC_AHB1PeriphClockCmd+0x3c>)
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <RCC_AHB1PeriphClockCmd+0x3c>)
 800124c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	43db      	mvns	r3, r3
 8001252:	4013      	ands	r3, r2
 8001254:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800127a:	490a      	ldr	r1, [pc, #40]	; (80012a4 <RCC_APB1PeriphClockCmd+0x3c>)
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <RCC_APB1PeriphClockCmd+0x3c>)
 800127e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4313      	orrs	r3, r2
 8001284:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001286:	e006      	b.n	8001296 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001288:	4906      	ldr	r1, [pc, #24]	; (80012a4 <RCC_APB1PeriphClockCmd+0x3c>)
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <RCC_APB1PeriphClockCmd+0x3c>)
 800128c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	43db      	mvns	r3, r3
 8001292:	4013      	ands	r3, r2
 8001294:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80012ba:	490a      	ldr	r1, [pc, #40]	; (80012e4 <RCC_APB2PeriphClockCmd+0x3c>)
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <RCC_APB2PeriphClockCmd+0x3c>)
 80012be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80012c6:	e006      	b.n	80012d6 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80012c8:	4906      	ldr	r1, [pc, #24]	; (80012e4 <RCC_APB2PeriphClockCmd+0x3c>)
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <RCC_APB2PeriphClockCmd+0x3c>)
 80012cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4013      	ands	r3, r2
 80012d4:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80012fa:	490a      	ldr	r1, [pc, #40]	; (8001324 <RCC_APB2PeriphResetCmd+0x3c>)
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <RCC_APB2PeriphResetCmd+0x3c>)
 80012fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001306:	e006      	b.n	8001316 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001308:	4906      	ldr	r1, [pc, #24]	; (8001324 <RCC_APB2PeriphResetCmd+0x3c>)
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <RCC_APB2PeriphResetCmd+0x3c>)
 800130c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	43db      	mvns	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	b2db      	uxtb	r3, r3
 8001344:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d103      	bne.n	8001354 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <RCC_GetFlagStatus+0x70>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e009      	b.n	8001368 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d103      	bne.n	8001362 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <RCC_GetFlagStatus+0x70>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	e002      	b.n	8001368 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <RCC_GetFlagStatus+0x70>)
 8001364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001366:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 031f 	and.w	r3, r3, #31
 800136e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8001380:	2301      	movs	r3, #1
 8001382:	74fb      	strb	r3, [r7, #19]
 8001384:	e001      	b.n	800138a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800138a:	7cfb      	ldrb	r3, [r7, #19]
}
 800138c:	4618      	mov	r0, r3
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40023800 	.word	0x40023800

0800139c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a29      	ldr	r2, [pc, #164]	; (8001458 <TIM_TimeBaseInit+0xbc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d013      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <TIM_TimeBaseInit+0xc0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00f      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c6:	d00b      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a25      	ldr	r2, [pc, #148]	; (8001460 <TIM_TimeBaseInit+0xc4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <TIM_TimeBaseInit+0xc8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d003      	beq.n	80013e0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a23      	ldr	r2, [pc, #140]	; (8001468 <TIM_TimeBaseInit+0xcc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d108      	bne.n	80013f2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013e6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	885a      	ldrh	r2, [r3, #2]
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <TIM_TimeBaseInit+0xd0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00c      	beq.n	8001414 <TIM_TimeBaseInit+0x78>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <TIM_TimeBaseInit+0xd4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d008      	beq.n	8001414 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001408:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	891a      	ldrh	r2, [r3, #8]
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	4313      	orrs	r3, r2
 8001412:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	89fa      	ldrh	r2, [r7, #14]
 8001418:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	881a      	ldrh	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <TIM_TimeBaseInit+0xbc>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d003      	beq.n	800143a <TIM_TimeBaseInit+0x9e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a09      	ldr	r2, [pc, #36]	; (800145c <TIM_TimeBaseInit+0xc0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d104      	bne.n	8001444 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7a9b      	ldrb	r3, [r3, #10]
 800143e:	b29a      	uxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	829a      	strh	r2, [r3, #20]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40010000 	.word	0x40010000
 800145c:	40010400 	.word	0x40010400
 8001460:	40000400 	.word	0x40000400
 8001464:	40000800 	.word	0x40000800
 8001468:	40000c00 	.word	0x40000c00
 800146c:	40001000 	.word	0x40001000
 8001470:	40001400 	.word	0x40001400

08001474 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d008      	beq.n	8001498 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001496:	e007      	b.n	80014a8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	801a      	strh	r2, [r3, #0]
  }
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014c4:	787b      	ldrb	r3, [r7, #1]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d008      	beq.n	80014dc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	899b      	ldrh	r3, [r3, #12]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80014da:	e009      	b.n	80014f0 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	899b      	ldrh	r3, [r3, #12]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4013      	ands	r3, r2
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	819a      	strh	r2, [r3, #12]
  }
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800150c:	2300      	movs	r3, #0
 800150e:	81bb      	strh	r3, [r7, #12]
 8001510:	2300      	movs	r3, #0
 8001512:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	8a1b      	ldrh	r3, [r3, #16]
 8001518:	b29a      	uxth	r2, r3
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	4013      	ands	r3, r2
 800151e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	899b      	ldrh	r3, [r3, #12]
 8001524:	b29a      	uxth	r2, r3
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	4013      	ands	r3, r2
 800152a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800152c:	89bb      	ldrh	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <TIM_GetITStatus+0x42>
 8001532:	897b      	ldrh	r3, [r7, #10]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	43db      	mvns	r3, r3
 8001560:	b29a      	uxth	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	821a      	strh	r2, [r3, #16]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	8a1b      	ldrh	r3, [r3, #16]
 8001592:	b29b      	uxth	r3, r3
 8001594:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800159c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	88db      	ldrh	r3, [r3, #6]
 80015a2:	461a      	mov	r2, r3
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	4313      	orrs	r3, r2
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	899b      	ldrh	r3, [r3, #12]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015c0:	f023 030c 	bic.w	r3, r3, #12
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	889a      	ldrh	r2, [r3, #4]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	891b      	ldrh	r3, [r3, #8]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	4313      	orrs	r3, r2
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	8a9b      	ldrh	r3, [r3, #20]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	899b      	ldrh	r3, [r3, #12]
 80015fe:	461a      	mov	r2, r3
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	4313      	orrs	r3, r2
 8001604:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd5e 	bl	80010d4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a30      	ldr	r2, [pc, #192]	; (80016dc <USART_Init+0x168>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d003      	beq.n	8001628 <USART_Init+0xb4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <USART_Init+0x16c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d102      	bne.n	800162e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	623b      	str	r3, [r7, #32]
 800162c:	e001      	b.n	8001632 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	899b      	ldrh	r3, [r3, #12]
 8001636:	b29b      	uxth	r3, r3
 8001638:	b21b      	sxth	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	da0c      	bge.n	8001658 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800163e:	6a3a      	ldr	r2, [r7, #32]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009a      	lsls	r2, r3, #2
 8001648:	441a      	add	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e00b      	b.n	8001670 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001658:	6a3a      	ldr	r2, [r7, #32]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009a      	lsls	r2, r3, #2
 8001662:	441a      	add	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <USART_Init+0x170>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	095b      	lsrs	r3, r3, #5
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	2264      	movs	r2, #100	; 0x64
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	899b      	ldrh	r3, [r3, #12]
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21b      	sxth	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	da0c      	bge.n	80016b4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	3332      	adds	r3, #50	; 0x32
 80016a0:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <USART_Init+0x170>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ae:	4313      	orrs	r3, r2
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
 80016b2:	e00b      	b.n	80016cc <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	3332      	adds	r3, #50	; 0x32
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <USART_Init+0x170>)
 80016bc:	fba2 2303 	umull	r2, r3, r2, r3
 80016c0:	095b      	lsrs	r3, r3, #5
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c8:	4313      	orrs	r3, r2
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	811a      	strh	r2, [r3, #8]
}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	; 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40011000 	.word	0x40011000
 80016e0:	40011400 	.word	0x40011400
 80016e4:	51eb851f 	.word	0x51eb851f

080016e8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d008      	beq.n	800170c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	899b      	ldrh	r3, [r3, #12]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001704:	b29a      	uxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800170a:	e007      	b.n	800171c <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	899b      	ldrh	r3, [r3, #12]
 8001710:	b29b      	uxth	r3, r3
 8001712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	819a      	strh	r2, [r3, #12]
  }
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	809a      	strh	r2, [r3, #4]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	095b      	lsrs	r3, r3, #5
 8001776:	b2db      	uxtb	r3, r3
 8001778:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001782:	2201      	movs	r2, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d103      	bne.n	800179a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	330c      	adds	r3, #12
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e009      	b.n	80017ae <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d103      	bne.n	80017a8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3310      	adds	r3, #16
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e002      	b.n	80017ae <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3314      	adds	r3, #20
 80017ac:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80017ae:	787b      	ldrb	r3, [r7, #1]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	6811      	ldr	r1, [r2, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80017c0:	e006      	b.n	80017d0 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	6811      	ldr	r1, [r2, #0]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	43d2      	mvns	r2, r2
 80017cc:	400a      	ands	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
  }
}
 80017d0:	bf00      	nop
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	4013      	ands	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e001      	b.n	8001806 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <_Z15initSYSTEMCLOCKv>:

int q = 0; // pocitadlo strednej hodnoty

extern bool map; // premenna zapnuteho/vypnuteho mapovania

void initSYSTEMCLOCK(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0

	RCC_HSICmd(ENABLE);
 8001818:	2001      	movs	r0, #1
 800181a:	f7ff fc2f 	bl	800107c <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 800181e:	2021      	movs	r0, #33	; 0x21
 8001820:	f7ff fd82 	bl	8001328 <RCC_GetFlagStatus>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf0c      	ite	eq
 800182a:	2301      	moveq	r3, #1
 800182c:	2300      	movne	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d000      	beq.n	8001836 <_Z15initSYSTEMCLOCKv+0x22>
 8001834:	e7f3      	b.n	800181e <_Z15initSYSTEMCLOCKv+0xa>

	RCC_SYSCLKConfig(RCC_CFGR_SW_HSI);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fc30 	bl	800109c <RCC_SYSCLKConfig>
	SystemCoreClockUpdate();
 800183c:	f000 fba2 	bl	8001f84 <SystemCoreClockUpdate>

	//uint32_t SystemClockValue = SystemCoreClock;

	return;
 8001840:	bf00      	nop

}
 8001842:	bd80      	pop	{r7, pc}

08001844 <_Z22initTIMERwithINTERRUPTt>:

void initTIMERwithINTERRUPT(uint16_t TimerVal) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800184e:	2101      	movs	r1, #1
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fd09 	bl	8001268 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 8000-1;
 8001856:	f641 733f 	movw	r3, #7999	; 0x1f3f
 800185a:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800185c:	2300      	movs	r3, #0
 800185e:	81fb      	strh	r3, [r7, #14]
	timerInitStructure.TIM_Period = TimerVal-1;
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	3b01      	subs	r3, #1
 8001864:	613b      	str	r3, [r7, #16]
	timerInitStructure.TIM_ClockDivision = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	82bb      	strh	r3, [r7, #20]
	timerInitStructure.TIM_RepetitionCounter = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	75bb      	strb	r3, [r7, #22]
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001878:	f7ff fd90 	bl	800139c <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 800187c:	2101      	movs	r1, #1
 800187e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001882:	f7ff fdf7 	bl	8001474 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); // povolenie update eventu
 8001886:	2201      	movs	r2, #1
 8001888:	2101      	movs	r1, #1
 800188a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800188e:	f7ff fe11 	bl	80014b4 <TIM_ITConfig>

    NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 8001892:	231c      	movs	r3, #28
 8001894:	723b      	strb	r3, [r7, #8]
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	727b      	strb	r3, [r7, #9]
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
 800189a:	2301      	movs	r3, #1
 800189c:	72bb      	strb	r3, [r7, #10]
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 800189e:	2301      	movs	r3, #1
 80018a0:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&nvicStructure);
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f880 	bl	80009ac <NVIC_Init>

    return;
 80018ac:	bf00      	nop
}
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 80018ba:	2101      	movs	r1, #1
 80018bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018c0:	f7ff fe1c 	bl	80014fc <TIM_GetITStatus>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf14      	ite	ne
 80018ca:	2301      	movne	r3, #1
 80018cc:	2300      	moveq	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d070      	beq.n	80019b6 <TIM2_IRQHandler+0x102>

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80018d4:	2101      	movs	r1, #1
 80018d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018da:	f7ff fe39 	bl	8001550 <TIM_ClearITPendingBit>

		// premapovanie hodnot
		if (map==true) {
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <TIM2_IRQHandler+0x10c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <TIM2_IRQHandler+0x3e>
			int_pointer = remap(ADC_Values);
 80018e6:	4837      	ldr	r0, [pc, #220]	; (80019c4 <TIM2_IRQHandler+0x110>)
 80018e8:	f000 f874 	bl	80019d4 <_Z5remapPt>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <TIM2_IRQHandler+0x114>)
 80018f0:	601a      	str	r2, [r3, #0]
		}

		// najprv sa posle x potom y
		for (int j=0; j<2; j++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	dc5c      	bgt.n	80019b6 <TIM2_IRQHandler+0x102>

			// konverzia hodnoty z ADC na pole charov, funkcia vracia smernik
			if (map==true) {
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <TIM2_IRQHandler+0x10c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00d      	beq.n	8001920 <TIM2_IRQHandler+0x6c>
				char_pointer = INTconversionCHAR(*(int_pointer+j));
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <TIM2_IRQHandler+0x114>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f968 	bl	8001be8 <_Z17INTconversionCHARh>
 8001918:	4602      	mov	r2, r0
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <TIM2_IRQHandler+0x118>)
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e00b      	b.n	8001938 <TIM2_IRQHandler+0x84>
			} else {
				char_pointer = INTconversionCHAR(*(ADC_Values+j));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <TIM2_IRQHandler+0x110>)
 8001926:	4413      	add	r3, r2
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f95b 	bl	8001be8 <_Z17INTconversionCHARh>
 8001932:	4602      	mov	r2, r0
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <TIM2_IRQHandler+0x118>)
 8001936:	601a      	str	r2, [r3, #0]
			}

			int i = *(char_pointer); // na 1. mieste je pocet cifier
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <TIM2_IRQHandler+0x118>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	603b      	str	r3, [r7, #0]
			while (i>0) {
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	dd1a      	ble.n	800197c <TIM2_IRQHandler+0xc8>
				while (USART_GetFlagStatus(USART1,USART_FLAG_TXE)==0) {};
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	4821      	ldr	r0, [pc, #132]	; (80019d0 <TIM2_IRQHandler+0x11c>)
 800194a:	f7ff ff47 	bl	80017dc <USART_GetFlagStatus>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d000      	beq.n	8001960 <TIM2_IRQHandler+0xac>
 800195e:	e7f2      	b.n	8001946 <TIM2_IRQHandler+0x92>
				USART_SendData(USART1,*(char_pointer+i));
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <TIM2_IRQHandler+0x118>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4413      	add	r3, r2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	4818      	ldr	r0, [pc, #96]	; (80019d0 <TIM2_IRQHandler+0x11c>)
 8001970:	f7ff feda 	bl	8001728 <USART_SendData>
				i--;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3b01      	subs	r3, #1
 8001978:	603b      	str	r3, [r7, #0]
			} else {
				char_pointer = INTconversionCHAR(*(ADC_Values+j));
			}

			int i = *(char_pointer); // na 1. mieste je pocet cifier
			while (i>0) {
 800197a:	e7e1      	b.n	8001940 <TIM2_IRQHandler+0x8c>
				USART_SendData(USART1,*(char_pointer+i));
				i--;
			}

			// najprv space a pootm new line
			while (USART_GetFlagStatus(USART1,USART_FLAG_TXE)==0) {};
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	4814      	ldr	r0, [pc, #80]	; (80019d0 <TIM2_IRQHandler+0x11c>)
 8001980:	f7ff ff2c 	bl	80017dc <USART_GetFlagStatus>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d000      	beq.n	8001996 <TIM2_IRQHandler+0xe2>
 8001994:	e7f2      	b.n	800197c <TIM2_IRQHandler+0xc8>
			if (j==0) {
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d104      	bne.n	80019a6 <TIM2_IRQHandler+0xf2>
				USART_SendData(USART1,32);
 800199c:	2120      	movs	r1, #32
 800199e:	480c      	ldr	r0, [pc, #48]	; (80019d0 <TIM2_IRQHandler+0x11c>)
 80019a0:	f7ff fec2 	bl	8001728 <USART_SendData>
 80019a4:	e003      	b.n	80019ae <TIM2_IRQHandler+0xfa>
			} else {
				USART_SendData(USART1,13);
 80019a6:	210d      	movs	r1, #13
 80019a8:	4809      	ldr	r0, [pc, #36]	; (80019d0 <TIM2_IRQHandler+0x11c>)
 80019aa:	f7ff febd 	bl	8001728 <USART_SendData>
		if (map==true) {
			int_pointer = remap(ADC_Values);
		}

		// najprv sa posle x potom y
		for (int j=0; j<2; j++) {
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3301      	adds	r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	e79f      	b.n	80018f6 <TIM2_IRQHandler+0x42>
		USART_SendData(USART1,ADC_Values[1]);
		*/

	}

	return;
 80019b6:	bf00      	nop
}
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000074 	.word	0x20000074
 80019c4:	20000010 	.word	0x20000010
 80019c8:	2000005c 	.word	0x2000005c
 80019cc:	20000060 	.word	0x20000060
 80019d0:	40011000 	.word	0x40011000

080019d4 <_Z5remapPt>:

int *remap(uint16_t ADC_Values[2]) {
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	// funkcia vracia smernik na nove pole

	static int int_array[2];
	int rozsah;

	if (q<10) {
 80019dc:	4b7e      	ldr	r3, [pc, #504]	; (8001bd8 <_Z5remapPt+0x204>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	dc04      	bgt.n	80019ee <_Z5remapPt+0x1a>
		q++;
 80019e4:	4b7c      	ldr	r3, [pc, #496]	; (8001bd8 <_Z5remapPt+0x204>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a7b      	ldr	r2, [pc, #492]	; (8001bd8 <_Z5remapPt+0x204>)
 80019ec:	6013      	str	r3, [r2, #0]
	}

	for (int j=0; j<2; j++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	f300 80ea 	bgt.w	8001bce <_Z5remapPt+0x1fa>

		// nastavenie defaultnych strednych hodnot
		if (q==10) {
 80019fa:	4b77      	ldr	r3, [pc, #476]	; (8001bd8 <_Z5remapPt+0x204>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b0a      	cmp	r3, #10
 8001a00:	d113      	bne.n	8001a2a <_Z5remapPt+0x56>
			default_values[j*3+1] = ADC_Values[j];
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	0052      	lsls	r2, r2, #1
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	440a      	add	r2, r1
 8001a14:	8812      	ldrh	r2, [r2, #0]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4a70      	ldr	r2, [pc, #448]	; (8001bdc <_Z5remapPt+0x208>)
 8001a1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (j==1) {
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d102      	bne.n	8001a2a <_Z5remapPt+0x56>
				q = 11;
 8001a24:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <_Z5remapPt+0x204>)
 8001a26:	220b      	movs	r2, #11
 8001a28:	601a      	str	r2, [r3, #0]
			}
		}

		// nastavenie novych minimalnych/maximalnych hodnot
		if (ADC_Values[j]<default_values[j*3+0]) {
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a67      	ldr	r2, [pc, #412]	; (8001bdc <_Z5remapPt+0x208>)
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	4299      	cmp	r1, r3
 8001a46:	da0d      	bge.n	8001a64 <_Z5remapPt+0x90>
			default_values[j*3+0] = ADC_Values[j];
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	0052      	lsls	r2, r2, #1
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	440a      	add	r2, r1
 8001a58:	8812      	ldrh	r2, [r2, #0]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4a5f      	ldr	r2, [pc, #380]	; (8001bdc <_Z5remapPt+0x208>)
 8001a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001a62:	e01d      	b.n	8001aa0 <_Z5remapPt+0xcc>
		} else if (ADC_Values[j]>default_values[j*3+2]) {
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <_Z5remapPt+0x208>)
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	4299      	cmp	r1, r3
 8001a82:	dd0d      	ble.n	8001aa0 <_Z5remapPt+0xcc>
			default_values[j*3+2] = ADC_Values[j];
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	0052      	lsls	r2, r2, #1
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	440a      	add	r2, r1
 8001a96:	8812      	ldrh	r2, [r2, #0]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4a50      	ldr	r2, [pc, #320]	; (8001bdc <_Z5remapPt+0x208>)
 8001a9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		// premapovanie
		if (ADC_Values[j]>default_values[j*3+1]) {
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	4a49      	ldr	r2, [pc, #292]	; (8001bdc <_Z5remapPt+0x208>)
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	4299      	cmp	r1, r3
 8001abe:	dd12      	ble.n	8001ae6 <_Z5remapPt+0x112>
			rozsah = default_values[j*3+2]-default_values[j*3+1]; // max-stred
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3302      	adds	r3, #2
 8001aca:	4a44      	ldr	r2, [pc, #272]	; (8001bdc <_Z5remapPt+0x208>)
 8001acc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3301      	adds	r3, #1
 8001ada:	4a40      	ldr	r2, [pc, #256]	; (8001bdc <_Z5remapPt+0x208>)
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	1acb      	subs	r3, r1, r3
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e020      	b.n	8001b28 <_Z5remapPt+0x154>
		} else if (ADC_Values[j]<default_values[j*3+1]) {
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a37      	ldr	r2, [pc, #220]	; (8001bdc <_Z5remapPt+0x208>)
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	4299      	cmp	r1, r3
 8001b04:	da10      	bge.n	8001b28 <_Z5remapPt+0x154>
			rozsah = default_values[j*3+1]-default_values[j*3+0]; // stred-min
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <_Z5remapPt+0x208>)
 8001b12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a2f      	ldr	r2, [pc, #188]	; (8001bdc <_Z5remapPt+0x208>)
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	1acb      	subs	r3, r1, r3
 8001b26:	60fb      	str	r3, [r7, #12]
		}

		int_array[j] = 128+(ADC_Values[j]-default_values[j*3+1])*(128/(double)rozsah);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <_Z5remapPt+0x208>)
 8001b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b44:	1acb      	subs	r3, r1, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fc90 	bl	800046c <__aeabi_i2d>
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	460d      	mov	r5, r1
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f7fe fc8b 	bl	800046c <__aeabi_i2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	f04f 0000 	mov.w	r0, #0
 8001b5e:	4920      	ldr	r1, [pc, #128]	; (8001be0 <_Z5remapPt+0x20c>)
 8001b60:	f7fe fe14 	bl	800078c <__aeabi_ddiv>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fce4 	bl	8000538 <__aeabi_dmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	4618      	mov	r0, r3
 8001b76:	4621      	mov	r1, r4
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <_Z5remapPt+0x20c>)
 8001b7e:	f7fe fb29 	bl	80001d4 <__adddf3>
 8001b82:	4603      	mov	r3, r0
 8001b84:	460c      	mov	r4, r1
 8001b86:	4618      	mov	r0, r3
 8001b88:	4621      	mov	r1, r4
 8001b8a:	f7fe fee7 	bl	800095c <__aeabi_d2iz>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <_Z5remapPt+0x210>)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// pre istotu obmedzenie
		if (int_array[j]>255) {
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <_Z5remapPt+0x210>)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	2bff      	cmp	r3, #255	; 0xff
 8001ba2:	dd05      	ble.n	8001bb0 <_Z5remapPt+0x1dc>
			int_array[j] = 255;
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <_Z5remapPt+0x210>)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	21ff      	movs	r1, #255	; 0xff
 8001baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001bae:	e00a      	b.n	8001bc6 <_Z5remapPt+0x1f2>
		} else if (int_array[j]<0) {
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <_Z5remapPt+0x210>)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da04      	bge.n	8001bc6 <_Z5remapPt+0x1f2>
			int_array[j] = 0;
 8001bbc:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <_Z5remapPt+0x210>)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (q<10) {
		q++;
	}

	for (int j=0; j<2; j++) {
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	e711      	b.n	80019f2 <_Z5remapPt+0x1e>
			int_array[j] = 0;
		}

	}

	return int_array;
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <_Z5remapPt+0x210>)
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd8:	20000064 	.word	0x20000064
 8001bdc:	20000014 	.word	0x20000014
 8001be0:	40600000 	.word	0x40600000
 8001be4:	20000068 	.word	0x20000068

08001be8 <_Z17INTconversionCHARh>:

char *INTconversionCHAR(uint8_t value) {
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]

	// funkcia vracia smernik na pole

	int j = 1; // index pola, zacina na 1
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
	static char char_array[4]; // pole, na 1. mieste pocet cifier hodnoty z ADC (1-3)

	do {
		*(char_array+j) = (char)(value % 10) + '0'; // konverzia z INT na CHAR
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_Z17INTconversionCHARh+0x64>)
 8001bfa:	1898      	adds	r0, r3, r2
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <_Z17INTconversionCHARh+0x68>)
 8001c00:	fba3 1302 	umull	r1, r3, r3, r2
 8001c04:	08d9      	lsrs	r1, r3, #3
 8001c06:	460b      	mov	r3, r1
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3330      	adds	r3, #48	; 0x30
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	7003      	strb	r3, [r0, #0]
		value /= 10;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <_Z17INTconversionCHARh+0x68>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	71fb      	strb	r3, [r7, #7]
		j++;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
	// funkcia vracia smernik na pole

	int j = 1; // index pola, zacina na 1
	static char char_array[4]; // pole, na 1. mieste pocet cifier hodnoty z ADC (1-3)

	do {
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d000      	beq.n	8001c32 <_Z17INTconversionCHARh+0x4a>
 8001c30:	e7e1      	b.n	8001bf6 <_Z17INTconversionCHARh+0xe>
		*(char_array+j) = (char)(value % 10) + '0'; // konverzia z INT na CHAR
		value /= 10;
		j++;
	} while (value);

	*(char_array) = j-1; // teraz uz vieme pocet cifier, zapis na 1. miesto v poli
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <_Z17INTconversionCHARh+0x64>)
 8001c3c:	701a      	strb	r2, [r3, #0]

	return char_array;
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <_Z17INTconversionCHARh+0x64>)
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20000070 	.word	0x20000070
 8001c50:	cccccccd 	.word	0xcccccccd

08001c54 <_Z9initUSARTv>:

void initUSART(void) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0

	 /* enable APB2 peripheral clock for USART1
	  * note that only USART1 and USART6 are connected to APB2
	  * the other USARTs are connected to APB1
	  */
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	2010      	movs	r0, #16
 8001c5e:	f7ff fb23 	bl	80012a8 <RCC_APB2PeriphClockCmd>

	 /* enable the peripheral clock for the pins used by
	  * USART1, PB6 for TX and PB7 for RX
	  */
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001c62:	2101      	movs	r1, #1
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7ff fadf 	bl	8001228 <RCC_AHB1PeriphClockCmd>

	 /* This sequence sets up the TX and RX pins
	  * so they work correctly with the USART1 peripheral
	  */
	 GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pins 6 (TX) and 7 (RX) are used
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	61bb      	str	r3, [r7, #24]
	 GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			 // the pins are configured as alternate function so the USART peripheral has access to them
 8001c6e:	2302      	movs	r3, #2
 8001c70:	773b      	strb	r3, [r7, #28]
	 GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		 // this defines the IO speed and has nothing to do with the baudrate!
 8001c72:	2302      	movs	r3, #2
 8001c74:	777b      	strb	r3, [r7, #29]
	 GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;		 // this defines the output type as push pull mode (as opposed to open drain)
 8001c76:	2300      	movs	r3, #0
 8001c78:	77bb      	strb	r3, [r7, #30]
	 GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			 // this activates the pullup resistors on the IO pins
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	77fb      	strb	r3, [r7, #31]
	 GPIO_Init(GPIOB, &GPIO_InitStruct);				 // now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	4619      	mov	r1, r3
 8001c84:	481c      	ldr	r0, [pc, #112]	; (8001cf8 <_Z9initUSARTv+0xa4>)
 8001c86:	f7ff f921 	bl	8000ecc <GPIO_Init>

	 /* The RX and TX pins are now connected to their AF
	  * so that the USART1 can take over control of the
	  * pins
	  */
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	2106      	movs	r1, #6
 8001c8e:	481a      	ldr	r0, [pc, #104]	; (8001cf8 <_Z9initUSARTv+0xa4>)
 8001c90:	f7ff f9aa 	bl	8000fe8 <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8001c94:	2207      	movs	r2, #7
 8001c96:	2107      	movs	r1, #7
 8001c98:	4817      	ldr	r0, [pc, #92]	; (8001cf8 <_Z9initUSARTv+0xa4>)
 8001c9a:	f7ff f9a5 	bl	8000fe8 <GPIO_PinAFConfig>

	 /* Now the USART_InitStruct is used to define the
	  * properties of USART1
	  */
	 USART_InitStruct.USART_BaudRate = 9600;				 // the baudrate is set to the value we passed into this init function
 8001c9e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001ca2:	60bb      	str	r3, [r7, #8]
	 USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	81bb      	strh	r3, [r7, #12]
	 USART_InitStruct.USART_StopBits = USART_StopBits_1;	 // we want 1 stop bit (standard)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	81fb      	strh	r3, [r7, #14]
	 USART_InitStruct.USART_Parity = USART_Parity_No;		 // we don't want a parity bit (standard)
 8001cac:	2300      	movs	r3, #0
 8001cae:	823b      	strh	r3, [r7, #16]
	 USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	82bb      	strh	r3, [r7, #20]
	 USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	827b      	strh	r3, [r7, #18]
	 USART_Init(USART1, &USART_InitStruct);					 // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <_Z9initUSARTv+0xa8>)
 8001cc0:	f7ff fc58 	bl	8001574 <USART_Init>
	 /* Here the USART1 receive interrupt is enabled
	  * and the interrupt controller is configured
	  * to jump to the USART1_IRQHandler() function
	  * if the USART1 receive interrupt occurs
	  */
	 USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f240 5125 	movw	r1, #1317	; 0x525
 8001cca:	480c      	ldr	r0, [pc, #48]	; (8001cfc <_Z9initUSARTv+0xa8>)
 8001ccc:	f7ff fd3e 	bl	800174c <USART_ITConfig>

	 NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		  // we want to configure the USART1 interrupts
 8001cd0:	2325      	movs	r3, #37	; 0x25
 8001cd2:	713b      	strb	r3, [r7, #4]
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 8; // this sets the priority group of the USART1 interrupts
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	717b      	strb	r3, [r7, #5]
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		  // this sets the subpriority inside the group
 8001cd8:	2300      	movs	r3, #0
 8001cda:	71bb      	strb	r3, [r7, #6]
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			  // the USART1 interrupts are globally enabled
 8001cdc:	2301      	movs	r3, #1
 8001cde:	71fb      	strb	r3, [r7, #7]
	 NVIC_Init(&NVIC_InitStructure);							  // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fe62 	bl	80009ac <NVIC_Init>

	 // finally this enables the complete USART1 peripheral
	 USART_Cmd(USART1, ENABLE);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <_Z9initUSARTv+0xa8>)
 8001cec:	f7ff fcfc 	bl	80016e8 <USART_Cmd>

	 return;
 8001cf0:	bf00      	nop
}
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40011000 	.word	0x40011000

08001d00 <_Z14initADCwithDMAv>:

void initADCwithDMA(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b09c      	sub	sp, #112	; 0x70
 8001d04:	af00      	add	r7, sp, #0
    ADC_CommonInitTypeDef ADC_CommonInitStruct;
    DMA_InitTypeDef       DMA_InitStruct;
    GPIO_InitTypeDef      GPIO_InitStruct;

    // Enable DMA2 clocks
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8001d06:	2101      	movs	r1, #1
 8001d08:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001d0c:	f7ff fa8c 	bl	8001228 <RCC_AHB1PeriphClockCmd>
    // Enable GPIOC clocks
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001d10:	2101      	movs	r1, #1
 8001d12:	2004      	movs	r0, #4
 8001d14:	f7ff fa88 	bl	8001228 <RCC_AHB1PeriphClockCmd>
    // Enable ADC1 clocks
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001d18:	2101      	movs	r1, #1
 8001d1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d1e:	f7ff fac3 	bl	80012a8 <RCC_APB2PeriphClockCmd>
    //RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOCEN, ENABLE);

    // DMA2 Stream0 channel0 configuration
    DMA_InitStruct.DMA_Channel = DMA_Channel_0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
    DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR; // ADC1's data register
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <_Z14initADCwithDMAv+0x11c>)
 8001d28:	613b      	str	r3, [r7, #16]
    DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&ADC_Values;
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <_Z14initADCwithDMAv+0x120>)
 8001d2c:	617b      	str	r3, [r7, #20]
    DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
    DMA_InitStruct.DMA_BufferSize = 2;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61fb      	str	r3, [r7, #28]
    DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
    DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; // Reads 8 bit values
 8001d40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; // Stores 8 bit values
 8001d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;
 8001d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
    DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 8001d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
    DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
    DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001d60:	2300      	movs	r3, #0
 8001d62:	643b      	str	r3, [r7, #64]	; 0x40
    DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001d64:	2300      	movs	r3, #0
 8001d66:	647b      	str	r3, [r7, #68]	; 0x44
    DMA_Init(DMA2_Stream0, &DMA_InitStruct);
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	482d      	ldr	r0, [pc, #180]	; (8001e24 <_Z14initADCwithDMAv+0x124>)
 8001d70:	f7ff f838 	bl	8000de4 <DMA_Init>
    DMA_Cmd(DMA2_Stream0, ENABLE);
 8001d74:	2101      	movs	r1, #1
 8001d76:	482b      	ldr	r0, [pc, #172]	; (8001e24 <_Z14initADCwithDMAv+0x124>)
 8001d78:	f7ff f88c 	bl	8000e94 <DMA_Cmd>

    // Configure GPIO pins
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // PC0 - Channel 10, PC1 - Channel 11
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN; // The pins are configured in analog mode
 8001d80:	2303      	movs	r3, #3
 8001d82:	723b      	strb	r3, [r7, #8]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL; // We don't need any pull up or pull down
 8001d84:	2300      	movs	r3, #0
 8001d86:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(GPIOC, &GPIO_InitStruct); // Initialize GPIOC pins with the configuration
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4826      	ldr	r0, [pc, #152]	; (8001e28 <_Z14initADCwithDMAv+0x128>)
 8001d8e:	f7ff f89d 	bl	8000ecc <GPIO_Init>

    // ADC Common Init
    ADC_CommonInitStruct.ADC_Mode = ADC_Mode_Independent;
 8001d92:	2300      	movs	r3, #0
 8001d94:	64bb      	str	r3, [r7, #72]	; 0x48
    ADC_CommonInitStruct.ADC_Prescaler = ADC_Prescaler_Div2;
 8001d96:	2300      	movs	r3, #0
 8001d98:	64fb      	str	r3, [r7, #76]	; 0x4c
    ADC_CommonInitStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	653b      	str	r3, [r7, #80]	; 0x50
    ADC_CommonInitStruct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	657b      	str	r3, [r7, #84]	; 0x54
    ADC_CommonInit(&ADC_CommonInitStruct);
 8001da2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fec6 	bl	8000b38 <ADC_CommonInit>

    // ADC1 Init
    ADC_DeInit();
 8001dac:	f7fe fe60 	bl	8000a70 <ADC_DeInit>
    ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b; // Input voltage is converted into a 8bit int (max 255)
 8001db0:	2300      	movs	r3, #0
 8001db2:	65bb      	str	r3, [r7, #88]	; 0x58
    ADC_InitStruct.ADC_ScanConvMode = ENABLE; // The scan is configured in multiple channels
 8001db4:	2301      	movs	r3, #1
 8001db6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    ADC_InitStruct.ADC_ContinuousConvMode = ENABLE; // Continuous conversion: input signal is sampled more than once
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    ADC_InitStruct.ADC_ExternalTrigConv = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	667b      	str	r3, [r7, #100]	; 0x64
    ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	663b      	str	r3, [r7, #96]	; 0x60
    ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right; // Data converted will be shifted to right
 8001dc8:	2300      	movs	r3, #0
 8001dca:	66bb      	str	r3, [r7, #104]	; 0x68
    ADC_InitStruct.ADC_NbrOfConversion = 2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    ADC_Init(ADC1, &ADC_InitStruct); // Initialize ADC with the configuration
 8001dd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4814      	ldr	r0, [pc, #80]	; (8001e2c <_Z14initADCwithDMAv+0x12c>)
 8001dda:	f7fe fe57 	bl	8000a8c <ADC_Init>

    // Select the channels to be read from
    ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_144Cycles); // PC0
 8001dde:	2306      	movs	r3, #6
 8001de0:	2201      	movs	r2, #1
 8001de2:	210a      	movs	r1, #10
 8001de4:	4811      	ldr	r0, [pc, #68]	; (8001e2c <_Z14initADCwithDMAv+0x12c>)
 8001de6:	f7fe feeb 	bl	8000bc0 <ADC_RegularChannelConfig>
    ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 2, ADC_SampleTime_144Cycles); // PC1
 8001dea:	2306      	movs	r3, #6
 8001dec:	2202      	movs	r2, #2
 8001dee:	210b      	movs	r1, #11
 8001df0:	480e      	ldr	r0, [pc, #56]	; (8001e2c <_Z14initADCwithDMAv+0x12c>)
 8001df2:	f7fe fee5 	bl	8000bc0 <ADC_RegularChannelConfig>

    // Enable DMA request after last transfer (Single-ADC mode)
    ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 8001df6:	2101      	movs	r1, #1
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <_Z14initADCwithDMAv+0x12c>)
 8001dfa:	f7fe ffd7 	bl	8000dac <ADC_DMARequestAfterLastTransferCmd>
    // Enable ADC1 DMA
    ADC_DMACmd(ADC1, ENABLE);
 8001dfe:	2101      	movs	r1, #1
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <_Z14initADCwithDMAv+0x12c>)
 8001e02:	f7fe ffb7 	bl	8000d74 <ADC_DMACmd>
    // Enable ADC1
    ADC_Cmd(ADC1, ENABLE);
 8001e06:	2101      	movs	r1, #1
 8001e08:	4808      	ldr	r0, [pc, #32]	; (8001e2c <_Z14initADCwithDMAv+0x12c>)
 8001e0a:	f7fe febd 	bl	8000b88 <ADC_Cmd>
    // Start ADC1 Software Conversion
    ADC_SoftwareStartConv(ADC1);
 8001e0e:	4807      	ldr	r0, [pc, #28]	; (8001e2c <_Z14initADCwithDMAv+0x12c>)
 8001e10:	f7fe ffa0 	bl	8000d54 <ADC_SoftwareStartConv>

    return;
 8001e14:	bf00      	nop
}
 8001e16:	3770      	adds	r7, #112	; 0x70
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	4001204c 	.word	0x4001204c
 8001e20:	20000010 	.word	0x20000010
 8001e24:	40026410 	.word	0x40026410
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40012000 	.word	0x40012000

08001e30 <main>:
**===========================================================================
*/

bool map; // premenna zapnuteho/vypnuteho mapovania

int main(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0

	initSYSTEMCLOCK();
 8001e34:	f7ff fcee 	bl	8001814 <_Z15initSYSTEMCLOCKv>

	map = true; // true/false - mapovanie zapnute/vypnute
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <main+0x20>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]

	initUSART();
 8001e3e:	f7ff ff09 	bl	8001c54 <_Z9initUSARTv>
	initTIMERwithINTERRUPT(100); // TIM2, param: hodnota resetu v ms
 8001e42:	2064      	movs	r0, #100	; 0x64
 8001e44:	f7ff fcfe 	bl	8001844 <_Z22initTIMERwithINTERRUPTt>

	initADCwithDMA();
 8001e48:	f7ff ff5a 	bl	8001d00 <_Z14initADCwithDMAv>

	while (1) {
 8001e4c:	e7fe      	b.n	8001e4c <main+0x1c>
 8001e4e:	bf00      	nop
 8001e50:	20000074 	.word	0x20000074

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e5a:	e003      	b.n	8001e64 <LoopCopyDataInit>

08001e5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e62:	3104      	adds	r1, #4

08001e64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e6c:	d3f6      	bcc.n	8001e5c <CopyDataInit>
  ldr  r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e70:	e002      	b.n	8001e78 <LoopFillZerobss>

08001e72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e74:	f842 3b04 	str.w	r3, [r2], #4

08001e78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e7c:	d3f9      	bcc.n	8001e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e7e:	f000 f84b 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f000 f979 	bl	8002178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7ff ffd3 	bl	8001e30 <main>
  bx  lr    
 8001e8a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e8c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001e90:	080021e4 	.word	0x080021e4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e98:	20000040 	.word	0x20000040
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001e9c:	20000040 	.word	0x20000040
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ea0:	20000078 	.word	0x20000078

08001ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>
	...

08001ea8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001ebc:	e7fe      	b.n	8001ebc <HardFault_Handler+0x4>
 8001ebe:	bf00      	nop

08001ec0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001ec4:	e7fe      	b.n	8001ec4 <MemManage_Handler+0x4>
 8001ec6:	bf00      	nop

08001ec8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001ecc:	e7fe      	b.n	8001ecc <BusFault_Handler+0x4>
 8001ece:	bf00      	nop

08001ed0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001ed4:	e7fe      	b.n	8001ed4 <UsageFault_Handler+0x4>
 8001ed6:	bf00      	nop

08001ed8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop

08001ef8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop

08001f08 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop

08001f18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f1c:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <SystemInit+0x60>)
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <SystemInit+0x60>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f2c:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <SystemInit+0x64>)
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <SystemInit+0x64>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <SystemInit+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <SystemInit+0x64>)
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <SystemInit+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <SystemInit+0x64>)
 8001f50:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <SystemInit+0x68>)
 8001f52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f54:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <SystemInit+0x64>)
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <SystemInit+0x64>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <SystemInit+0x64>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001f66:	f000 f88b 	bl	8002080 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f6a:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <SystemInit+0x60>)
 8001f6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f70:	609a      	str	r2, [r3, #8]
#endif
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	24003010 	.word	0x24003010

08001f84 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	2302      	movs	r3, #2
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001f9e:	4b33      	ldr	r3, [pc, #204]	; (800206c <SystemCoreClockUpdate+0xe8>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d007      	beq.n	8001fbe <SystemCoreClockUpdate+0x3a>
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d009      	beq.n	8001fc6 <SystemCoreClockUpdate+0x42>
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d13f      	bne.n	8002036 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <SystemCoreClockUpdate+0xec>)
 8001fb8:	4a2e      	ldr	r2, [pc, #184]	; (8002074 <SystemCoreClockUpdate+0xf0>)
 8001fba:	601a      	str	r2, [r3, #0]
      break;
 8001fbc:	e03f      	b.n	800203e <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <SystemCoreClockUpdate+0xec>)
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <SystemCoreClockUpdate+0xf4>)
 8001fc2:	601a      	str	r2, [r3, #0]
      break;
 8001fc4:	e03b      	b.n	800203e <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <SystemCoreClockUpdate+0xe8>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	0d9b      	lsrs	r3, r3, #22
 8001fd0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <SystemCoreClockUpdate+0xe8>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fda:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001fe2:	4a25      	ldr	r2, [pc, #148]	; (8002078 <SystemCoreClockUpdate+0xf4>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <SystemCoreClockUpdate+0xe8>)
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff2:	400b      	ands	r3, r1
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	fb03 f302 	mul.w	r3, r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e00c      	b.n	8002018 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001ffe:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <SystemCoreClockUpdate+0xf0>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	fbb2 f2f3 	udiv	r2, r2, r3
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <SystemCoreClockUpdate+0xe8>)
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800200e:	400b      	ands	r3, r1
 8002010:	099b      	lsrs	r3, r3, #6
 8002012:	fb03 f302 	mul.w	r3, r3, r2
 8002016:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <SystemCoreClockUpdate+0xe8>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	3301      	adds	r3, #1
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <SystemCoreClockUpdate+0xec>)
 8002032:	6013      	str	r3, [r2, #0]
      break;
 8002034:	e003      	b.n	800203e <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <SystemCoreClockUpdate+0xec>)
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <SystemCoreClockUpdate+0xf0>)
 800203a:	601a      	str	r2, [r3, #0]
      break;
 800203c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <SystemCoreClockUpdate+0xe8>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	4a0c      	ldr	r2, [pc, #48]	; (800207c <SystemCoreClockUpdate+0xf8>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <SystemCoreClockUpdate+0xec>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <SystemCoreClockUpdate+0xec>)
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	2000002c 	.word	0x2000002c
 8002074:	00f42400 	.word	0x00f42400
 8002078:	017d7840 	.word	0x017d7840
 800207c:	20000030 	.word	0x20000030

08002080 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800208e:	4a36      	ldr	r2, [pc, #216]	; (8002168 <SetSysClock+0xe8>)
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <SetSysClock+0xe8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <SetSysClock+0xe8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3301      	adds	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <SetSysClock+0x38>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80020b6:	d1f0      	bne.n	800209a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <SetSysClock+0xe8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80020c4:	2301      	movs	r3, #1
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	e001      	b.n	80020ce <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d142      	bne.n	800215a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80020d4:	4a24      	ldr	r2, [pc, #144]	; (8002168 <SetSysClock+0xe8>)
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <SetSysClock+0xe8>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <SetSysClock+0xec>)
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <SetSysClock+0xec>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ea:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80020ec:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <SetSysClock+0xe8>)
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <SetSysClock+0xe8>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80020f4:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <SetSysClock+0xe8>)
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <SetSysClock+0xe8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fe:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <SetSysClock+0xe8>)
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <SetSysClock+0xe8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800210a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <SetSysClock+0xe8>)
 800210e:	4a18      	ldr	r2, [pc, #96]	; (8002170 <SetSysClock+0xf0>)
 8002110:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002112:	4a15      	ldr	r2, [pc, #84]	; (8002168 <SetSysClock+0xe8>)
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <SetSysClock+0xe8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800211e:	bf00      	nop
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <SetSysClock+0xe8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f9      	beq.n	8002120 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <SetSysClock+0xf4>)
 800212e:	f240 7205 	movw	r2, #1797	; 0x705
 8002132:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002134:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <SetSysClock+0xe8>)
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <SetSysClock+0xe8>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002140:	4a09      	ldr	r2, [pc, #36]	; (8002168 <SetSysClock+0xe8>)
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <SetSysClock+0xe8>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800214c:	bf00      	nop
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <SetSysClock+0xe8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d1f9      	bne.n	800214e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000
 8002170:	07405419 	.word	0x07405419
 8002174:	40023c00 	.word	0x40023c00

08002178 <__libc_init_array>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <__libc_init_array+0x3c>)
 800217c:	4c0e      	ldr	r4, [pc, #56]	; (80021b8 <__libc_init_array+0x40>)
 800217e:	1ae4      	subs	r4, r4, r3
 8002180:	10a4      	asrs	r4, r4, #2
 8002182:	2500      	movs	r5, #0
 8002184:	461e      	mov	r6, r3
 8002186:	42a5      	cmp	r5, r4
 8002188:	d004      	beq.n	8002194 <__libc_init_array+0x1c>
 800218a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800218e:	4798      	blx	r3
 8002190:	3501      	adds	r5, #1
 8002192:	e7f8      	b.n	8002186 <__libc_init_array+0xe>
 8002194:	f000 f816 	bl	80021c4 <_init>
 8002198:	4c08      	ldr	r4, [pc, #32]	; (80021bc <__libc_init_array+0x44>)
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <__libc_init_array+0x48>)
 800219c:	1ae4      	subs	r4, r4, r3
 800219e:	10a4      	asrs	r4, r4, #2
 80021a0:	2500      	movs	r5, #0
 80021a2:	461e      	mov	r6, r3
 80021a4:	42a5      	cmp	r5, r4
 80021a6:	d004      	beq.n	80021b2 <__libc_init_array+0x3a>
 80021a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021ac:	4798      	blx	r3
 80021ae:	3501      	adds	r5, #1
 80021b0:	e7f8      	b.n	80021a4 <__libc_init_array+0x2c>
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	080021dc 	.word	0x080021dc
 80021b8:	080021dc 	.word	0x080021dc
 80021bc:	080021e0 	.word	0x080021e0
 80021c0:	080021dc 	.word	0x080021dc

080021c4 <_init>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	bf00      	nop
 80021c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ca:	bc08      	pop	{r3}
 80021cc:	469e      	mov	lr, r3
 80021ce:	4770      	bx	lr

080021d0 <_fini>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	bf00      	nop
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr
