
C:\Users\Patrik Bakyta\Documents\GitHub\VRS\F4_UART_ADC_DMA_TIMER_JOYSTICK\Debug\F4_UART_ADC_DMA_TIMER_JOYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000161c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080017a4  080017a4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080017a4  080017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017a8  080017a8  000117a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  080017ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          00000028  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000050  20000050  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   000067e6  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e98  00000000  00000000  0002683e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000958  00000000  00000000  000276d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a0  00000000  00000000  00028030  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002ce3  00000000  00000000  000288d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002fa1  00000000  00000000  0002b5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002e554  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028b0  00000000  00000000  0002e5d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00030e84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800178c 	.word	0x0800178c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	0800178c 	.word	0x0800178c

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000296:	f000 fc35 	bl	8000b04 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800029a:	2100      	movs	r1, #0
 800029c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002a0:	f000 fc30 	bl	8000b04 <RCC_APB2PeriphResetCmd>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ca:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	791b      	ldrb	r3, [r3, #4]
 80002d0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002d6:	4313      	orrs	r3, r2
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4313      	orrs	r3, r2
 80002dc:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <ADC_Init+0xa8>)
 80002ee:	4013      	ands	r3, r2
 80002f0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002fa:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000300:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	795b      	ldrb	r3, [r3, #5]
 8000306:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000308:	4313      	orrs	r3, r2
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	4313      	orrs	r3, r2
 800030e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000322:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	7d1b      	ldrb	r3, [r3, #20]
 8000328:	3b01      	subs	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	7afb      	ldrb	r3, [r7, #11]
 800032e:	4313      	orrs	r3, r2
 8000330:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000332:	7afb      	ldrb	r3, [r7, #11]
 8000334:	051b      	lsls	r3, r3, #20
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	4313      	orrs	r3, r2
 800033a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	c0fff7fd 	.word	0xc0fff7fd

08000354 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <ADC_CommonInit+0x48>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <ADC_CommonInit+0x4c>)
 800036a:	4013      	ands	r3, r2
 800036c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000376:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800037c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000382:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000384:	68fa      	ldr	r2, [r7, #12]
 8000386:	4313      	orrs	r3, r2
 8000388:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <ADC_CommonInit+0x48>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6053      	str	r3, [r2, #4]
}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40012300 	.word	0x40012300
 80003a0:	fffc30e0 	.word	0xfffc30e0

080003a4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d006      	beq.n	80003c4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	f043 0201 	orr.w	r2, r3, #1
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80003c2:	e005      	b.n	80003d0 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f023 0201 	bic.w	r2, r3, #1
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	609a      	str	r2, [r3, #8]
  }
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	4608      	mov	r0, r1
 80003e6:	4611      	mov	r1, r2
 80003e8:	461a      	mov	r2, r3
 80003ea:	4603      	mov	r3, r0
 80003ec:	70fb      	strb	r3, [r7, #3]
 80003ee:	460b      	mov	r3, r1
 80003f0:	70bb      	strb	r3, [r7, #2]
 80003f2:	4613      	mov	r3, r2
 80003f4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	2b09      	cmp	r3, #9
 8000402:	d923      	bls.n	800044c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	f1a3 020a 	sub.w	r2, r3, #10
 8000410:	4613      	mov	r3, r2
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	4413      	add	r3, r2
 8000416:	2207      	movs	r2, #7
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	43db      	mvns	r3, r3
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	4013      	ands	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000428:	7879      	ldrb	r1, [r7, #1]
 800042a:	78fb      	ldrb	r3, [r7, #3]
 800042c:	f1a3 020a 	sub.w	r2, r3, #10
 8000430:	4613      	mov	r3, r2
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	4413      	add	r3, r2
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	4313      	orrs	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	e01e      	b.n	800048a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000452:	78fa      	ldrb	r2, [r7, #3]
 8000454:	4613      	mov	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	4413      	add	r3, r2
 800045a:	2207      	movs	r2, #7
 800045c:	fa02 f303 	lsl.w	r3, r2, r3
 8000460:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	43db      	mvns	r3, r3
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	4013      	ands	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800046c:	7879      	ldrb	r1, [r7, #1]
 800046e:	78fa      	ldrb	r2, [r7, #3]
 8000470:	4613      	mov	r3, r2
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	4413      	add	r3, r2
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	4313      	orrs	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800048a:	78bb      	ldrb	r3, [r7, #2]
 800048c:	2b06      	cmp	r3, #6
 800048e:	d821      	bhi.n	80004d4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000494:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000496:	78bb      	ldrb	r3, [r7, #2]
 8000498:	1e5a      	subs	r2, r3, #1
 800049a:	4613      	mov	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	221f      	movs	r2, #31
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	43db      	mvns	r3, r3
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	4013      	ands	r3, r2
 80004b0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80004b2:	78f9      	ldrb	r1, [r7, #3]
 80004b4:	78bb      	ldrb	r3, [r7, #2]
 80004b6:	1e5a      	subs	r2, r3, #1
 80004b8:	4613      	mov	r3, r2
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4413      	add	r3, r2
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004d2:	e047      	b.n	8000564 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80004d4:	78bb      	ldrb	r3, [r7, #2]
 80004d6:	2b0c      	cmp	r3, #12
 80004d8:	d821      	bhi.n	800051e <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80004e0:	78bb      	ldrb	r3, [r7, #2]
 80004e2:	1fda      	subs	r2, r3, #7
 80004e4:	4613      	mov	r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	4413      	add	r3, r2
 80004ea:	221f      	movs	r2, #31
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	43db      	mvns	r3, r3
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	4013      	ands	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80004fc:	78f9      	ldrb	r1, [r7, #3]
 80004fe:	78bb      	ldrb	r3, [r7, #2]
 8000500:	1fda      	subs	r2, r3, #7
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	4313      	orrs	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800051c:	e022      	b.n	8000564 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000524:	78bb      	ldrb	r3, [r7, #2]
 8000526:	f1a3 020d 	sub.w	r2, r3, #13
 800052a:	4613      	mov	r3, r2
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4413      	add	r3, r2
 8000530:	221f      	movs	r2, #31
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	43db      	mvns	r3, r3
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	4013      	ands	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000542:	78f9      	ldrb	r1, [r7, #3]
 8000544:	78bb      	ldrb	r3, [r7, #2]
 8000546:	f1a3 020d 	sub.w	r2, r3, #13
 800054a:	4613      	mov	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4413      	add	r3, r2
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	4313      	orrs	r3, r2
 800055c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	609a      	str	r2, [r3, #8]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 80005ae:	e005      	b.n	80005bc <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	609a      	str	r2, [r3, #8]
  }
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 80005e6:	e005      	b.n	80005f4 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	609a      	str	r2, [r3, #8]
  }
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <DMA_Init+0xac>)
 8000618:	4013      	ands	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800062a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000636:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	6a1b      	ldr	r3, [r3, #32]
 800063c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000642:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000648:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800064e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000654:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	4313      	orrs	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f023 0307 	bic.w	r3, r3, #7
 800066e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	4313      	orrs	r3, r2
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	4313      	orrs	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	691a      	ldr	r2, [r3, #16]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	60da      	str	r2, [r3, #12]
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	f01c803f 	.word	0xf01c803f

080006b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f043 0201 	orr.w	r2, r3, #1
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80006ce:	e005      	b.n	80006dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f023 0201 	bic.w	r2, r3, #1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
  }
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	e076      	b.n	80007f2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000704:	2201      	movs	r2, #1
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	4013      	ands	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	429a      	cmp	r2, r3
 800071e:	d165      	bne.n	80007ec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	2103      	movs	r1, #3
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43db      	mvns	r3, r3
 8000730:	401a      	ands	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	4619      	mov	r1, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d003      	beq.n	800075e <GPIO_Init+0x76>
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d12e      	bne.n	80007bc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	2103      	movs	r1, #3
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	43db      	mvns	r3, r3
 800076e:	401a      	ands	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	4619      	mov	r1, r3
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	431a      	orrs	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685a      	ldr	r2, [r3, #4]
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	b29b      	uxth	r3, r3
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	401a      	ands	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	799b      	ldrb	r3, [r3, #6]
 80007aa:	4619      	mov	r1, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	431a      	orrs	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	68da      	ldr	r2, [r3, #12]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	2103      	movs	r1, #3
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	43db      	mvns	r3, r3
 80007ce:	401a      	ands	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	68da      	ldr	r2, [r3, #12]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	79db      	ldrb	r3, [r3, #7]
 80007dc:	4619      	mov	r1, r3
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	431a      	orrs	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3301      	adds	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	d985      	bls.n	8000704 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80007f8:	bf00      	nop
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]
 8000810:	4613      	mov	r3, r2
 8000812:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800081c:	787a      	ldrb	r2, [r7, #1]
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	f003 0307 	and.w	r3, r3, #7
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	08db      	lsrs	r3, r3, #3
 8000830:	b29b      	uxth	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	08db      	lsrs	r3, r3, #3
 8000838:	b29b      	uxth	r3, r3
 800083a:	461a      	mov	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3208      	adds	r2, #8
 8000840:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000844:	887b      	ldrh	r3, [r7, #2]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	210f      	movs	r1, #15
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	ea02 0103 	and.w	r1, r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f100 0208 	add.w	r2, r0, #8
 800085e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000862:	887b      	ldrh	r3, [r7, #2]
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	b29b      	uxth	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	4313      	orrs	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000878:	887b      	ldrh	r3, [r7, #2]
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	b29b      	uxth	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3208      	adds	r2, #8
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop

08000898 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <RCC_HSICmd+0x1c>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	42470000 	.word	0x42470000

080008b8 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <RCC_SYSCLKConfig+0x34>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f023 0303 	bic.w	r3, r3, #3
 80008d0:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <RCC_SYSCLKConfig+0x34>)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6093      	str	r3, [r2, #8]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40023800 	.word	0x40023800

080008f0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
 8000904:	2302      	movs	r3, #2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	2302      	movs	r3, #2
 800090e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000910:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <RCC_GetClocksFreq+0x144>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f003 030c 	and.w	r3, r3, #12
 8000918:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	2b04      	cmp	r3, #4
 800091e:	d007      	beq.n	8000930 <RCC_GetClocksFreq+0x40>
 8000920:	2b08      	cmp	r3, #8
 8000922:	d009      	beq.n	8000938 <RCC_GetClocksFreq+0x48>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d13f      	bne.n	80009a8 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a43      	ldr	r2, [pc, #268]	; (8000a38 <RCC_GetClocksFreq+0x148>)
 800092c:	601a      	str	r2, [r3, #0]
      break;
 800092e:	e03f      	b.n	80009b0 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a42      	ldr	r2, [pc, #264]	; (8000a3c <RCC_GetClocksFreq+0x14c>)
 8000934:	601a      	str	r2, [r3, #0]
      break;
 8000936:	e03b      	b.n	80009b0 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000938:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <RCC_GetClocksFreq+0x144>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000940:	0d9b      	lsrs	r3, r3, #22
 8000942:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000944:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <RCC_GetClocksFreq+0x144>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800094c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00d      	beq.n	8000970 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000954:	4a39      	ldr	r2, [pc, #228]	; (8000a3c <RCC_GetClocksFreq+0x14c>)
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	fbb2 f2f3 	udiv	r2, r2, r3
 800095c:	4b35      	ldr	r3, [pc, #212]	; (8000a34 <RCC_GetClocksFreq+0x144>)
 800095e:	6859      	ldr	r1, [r3, #4]
 8000960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000964:	400b      	ands	r3, r1
 8000966:	099b      	lsrs	r3, r3, #6
 8000968:	fb03 f302 	mul.w	r3, r3, r2
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	e00c      	b.n	800098a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000970:	4a31      	ldr	r2, [pc, #196]	; (8000a38 <RCC_GetClocksFreq+0x148>)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	fbb2 f2f3 	udiv	r2, r2, r3
 8000978:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <RCC_GetClocksFreq+0x144>)
 800097a:	6859      	ldr	r1, [r3, #4]
 800097c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000980:	400b      	ands	r3, r1
 8000982:	099b      	lsrs	r3, r3, #6
 8000984:	fb03 f302 	mul.w	r3, r3, r2
 8000988:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <RCC_GetClocksFreq+0x144>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000992:	0c1b      	lsrs	r3, r3, #16
 8000994:	3301      	adds	r3, #1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	fbb2 f2f3 	udiv	r2, r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
      break;
 80009a6:	e003      	b.n	80009b0 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <RCC_GetClocksFreq+0x148>)
 80009ac:	601a      	str	r2, [r3, #0]
      break;
 80009ae:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <RCC_GetClocksFreq+0x144>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009b8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	091b      	lsrs	r3, r3, #4
 80009be:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009c0:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <RCC_GetClocksFreq+0x150>)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	40da      	lsrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <RCC_GetClocksFreq+0x144>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80009e0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	0a9b      	lsrs	r3, r3, #10
 80009e6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009e8:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <RCC_GetClocksFreq+0x150>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4413      	add	r3, r2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	40da      	lsrs	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <RCC_GetClocksFreq+0x144>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a08:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	0b5b      	lsrs	r3, r3, #13
 8000a0e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <RCC_GetClocksFreq+0x150>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4413      	add	r3, r2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	40da      	lsrs	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	60da      	str	r2, [r3, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3724      	adds	r7, #36	; 0x24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	40023800 	.word	0x40023800
 8000a38:	00f42400 	.word	0x00f42400
 8000a3c:	017d7840 	.word	0x017d7840
 8000a40:	20000000 	.word	0x20000000

08000a44 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d006      	beq.n	8000a64 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a56:	490a      	ldr	r1, [pc, #40]	; (8000a80 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a62:	e006      	b.n	8000a72 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a64:	4906      	ldr	r1, [pc, #24]	; (8000a80 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	4013      	ands	r3, r2
 8000a70:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a96:	490a      	ldr	r1, [pc, #40]	; (8000ac0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000aa2:	e006      	b.n	8000ab2 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000aa4:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4013      	ands	r3, r2
 8000ab0:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ad6:	490a      	ldr	r1, [pc, #40]	; (8000b00 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000ae2:	e006      	b.n	8000af2 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ae4:	4906      	ldr	r1, [pc, #24]	; (8000b00 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4013      	ands	r3, r2
 8000af0:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b16:	490a      	ldr	r1, [pc, #40]	; (8000b40 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000b22:	e006      	b.n	8000b32 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000b24:	4906      	ldr	r1, [pc, #24]	; (8000b40 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <RCC_APB2PeriphResetCmd+0x3c>)
 8000b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	095b      	lsrs	r3, r3, #5
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d103      	bne.n	8000b70 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <RCC_GetFlagStatus+0x70>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d103      	bne.n	8000b7e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <RCC_GetFlagStatus+0x70>)
 8000b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e002      	b.n	8000b84 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <RCC_GetFlagStatus+0x70>)
 8000b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b82:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 031f 	and.w	r3, r3, #31
 8000b8a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	fa22 f303 	lsr.w	r3, r2, r3
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	74fb      	strb	r3, [r7, #19]
 8000ba0:	e001      	b.n	8000ba6 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000ba6:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <TIM_TimeBaseInit+0xbc>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d013      	beq.n	8000bfc <TIM_TimeBaseInit+0x44>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <TIM_TimeBaseInit+0xc0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d00f      	beq.n	8000bfc <TIM_TimeBaseInit+0x44>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be2:	d00b      	beq.n	8000bfc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <TIM_TimeBaseInit+0xc4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <TIM_TimeBaseInit+0x44>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <TIM_TimeBaseInit+0xc8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d003      	beq.n	8000bfc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <TIM_TimeBaseInit+0xcc>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d108      	bne.n	8000c0e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000bfc:	89fb      	ldrh	r3, [r7, #14]
 8000bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c02:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	885a      	ldrh	r2, [r3, #2]
 8000c08:	89fb      	ldrh	r3, [r7, #14]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <TIM_TimeBaseInit+0xd0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d00c      	beq.n	8000c30 <TIM_TimeBaseInit+0x78>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <TIM_TimeBaseInit+0xd4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d008      	beq.n	8000c30 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000c1e:	89fb      	ldrh	r3, [r7, #14]
 8000c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c24:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	891a      	ldrh	r2, [r3, #8]
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	89fa      	ldrh	r2, [r7, #14]
 8000c34:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	881a      	ldrh	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <TIM_TimeBaseInit+0xbc>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d003      	beq.n	8000c56 <TIM_TimeBaseInit+0x9e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <TIM_TimeBaseInit+0xc0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d104      	bne.n	8000c60 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	7a9b      	ldrb	r3, [r3, #10]
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2201      	movs	r2, #1
 8000c64:	829a      	strh	r2, [r3, #20]
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40010000 	.word	0x40010000
 8000c78:	40010400 	.word	0x40010400
 8000c7c:	40000400 	.word	0x40000400
 8000c80:	40000800 	.word	0x40000800
 8000c84:	40000c00 	.word	0x40000c00
 8000c88:	40001000 	.word	0x40001000
 8000c8c:	40001400 	.word	0x40001400

08000c90 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d008      	beq.n	8000cb4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000cb2:	e007      	b.n	8000cc4 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f023 0301 	bic.w	r3, r3, #1
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	801a      	strh	r2, [r3, #0]
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ce0:	787b      	ldrb	r3, [r7, #1]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d008      	beq.n	8000cf8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	899b      	ldrh	r3, [r3, #12]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000cf6:	e009      	b.n	8000d0c <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	899b      	ldrh	r3, [r3, #12]
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	4013      	ands	r3, r2
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	819a      	strh	r2, [r3, #12]
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	81bb      	strh	r3, [r7, #12]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	8a1b      	ldrh	r3, [r3, #16]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	899b      	ldrh	r3, [r3, #12]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	4013      	ands	r3, r2
 8000d46:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000d48:	89bb      	ldrh	r3, [r7, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <TIM_GetITStatus+0x42>
 8000d4e:	897b      	ldrh	r3, [r7, #10]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e001      	b.n	8000d5e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	821a      	strh	r2, [r3, #16]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	8a1b      	ldrh	r3, [r3, #16]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	88db      	ldrh	r3, [r3, #6]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	899b      	ldrh	r3, [r3, #12]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000ddc:	f023 030c 	bic.w	r3, r3, #12
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	889a      	ldrh	r2, [r3, #4]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	891b      	ldrh	r3, [r3, #8]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	8a9b      	ldrh	r3, [r3, #20]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	899b      	ldrh	r3, [r3, #12]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fd5e 	bl	80008f0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a30      	ldr	r2, [pc, #192]	; (8000ef8 <USART_Init+0x168>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <USART_Init+0xb4>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <USART_Init+0x16c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d102      	bne.n	8000e4a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	623b      	str	r3, [r7, #32]
 8000e48:	e001      	b.n	8000e4e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	899b      	ldrh	r3, [r3, #12]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da0c      	bge.n	8000e74 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000e5a:	6a3a      	ldr	r2, [r7, #32]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	009a      	lsls	r2, r3, #2
 8000e64:	441a      	add	r2, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e00b      	b.n	8000e8c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000e74:	6a3a      	ldr	r2, [r7, #32]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	009a      	lsls	r2, r3, #2
 8000e7e:	441a      	add	r2, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <USART_Init+0x170>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	095b      	lsrs	r3, r3, #5
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	2264      	movs	r2, #100	; 0x64
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	899b      	ldrh	r3, [r3, #12]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da0c      	bge.n	8000ed0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	3332      	adds	r3, #50	; 0x32
 8000ebc:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <USART_Init+0x170>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	e00b      	b.n	8000ee8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	3332      	adds	r3, #50	; 0x32
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <USART_Init+0x170>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	095b      	lsrs	r3, r3, #5
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	811a      	strh	r2, [r3, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	40011400 	.word	0x40011400
 8000f00:	51eb851f 	.word	0x51eb851f

08000f04 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	899b      	ldrh	r3, [r3, #12]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000f26:	e007      	b.n	8000f38 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	899b      	ldrh	r3, [r3, #12]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	819a      	strh	r2, [r3, #12]
  }
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	809a      	strh	r2, [r3, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	095b      	lsrs	r3, r3, #5
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d103      	bne.n	8000fb6 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e009      	b.n	8000fca <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d103      	bne.n	8000fc4 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3310      	adds	r3, #16
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e002      	b.n	8000fca <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3314      	adds	r3, #20
 8000fc8:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000fca:	787b      	ldrb	r3, [r7, #1]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	6811      	ldr	r1, [r2, #0]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000fdc:	e006      	b.n	8000fec <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	6811      	ldr	r1, [r2, #0]
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	43d2      	mvns	r2, r2
 8000fe8:	400a      	ands	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
  }
}
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	b29a      	uxth	r2, r3
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	4013      	ands	r3, r2
 8001012:	b29b      	uxth	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e001      	b.n	8001022 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_Z15initSYSTEMCLOCKv>:
uint8_t ADC_Values[2] = {153, 130}; // hodnoty z ADC v defaultnej polohe

char *char_pointer;
int i;

void initSYSTEMCLOCK(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

	RCC_HSICmd(ENABLE);
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff fc2f 	bl	8000898 <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 800103a:	2021      	movs	r0, #33	; 0x21
 800103c:	f7ff fd82 	bl	8000b44 <RCC_GetFlagStatus>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf0c      	ite	eq
 8001046:	2301      	moveq	r3, #1
 8001048:	2300      	movne	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d000      	beq.n	8001052 <_Z15initSYSTEMCLOCKv+0x22>
 8001050:	e7f3      	b.n	800103a <_Z15initSYSTEMCLOCKv+0xa>

	RCC_SYSCLKConfig(RCC_CFGR_SW_HSI);
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fc30 	bl	80008b8 <RCC_SYSCLKConfig>
	SystemCoreClockUpdate();
 8001058:	f000 fa78 	bl	800154c <SystemCoreClockUpdate>

	//uint32_t SystemClockValue = SystemCoreClock;

	return;
 800105c:	bf00      	nop

}
 800105e:	bd80      	pop	{r7, pc}

08001060 <_Z22initTIMERwithINTERRUPTt>:

void initTIMERwithINTERRUPT(uint16_t TimerVal) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	80fb      	strh	r3, [r7, #6]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800106a:	2101      	movs	r1, #1
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fd09 	bl	8000a84 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 8000-1;
 8001072:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001076:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001078:	2300      	movs	r3, #0
 800107a:	81fb      	strh	r3, [r7, #14]
	timerInitStructure.TIM_Period = TimerVal-1;
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	3b01      	subs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
	timerInitStructure.TIM_ClockDivision = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	82bb      	strh	r3, [r7, #20]
	timerInitStructure.TIM_RepetitionCounter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	75bb      	strb	r3, [r7, #22]
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001094:	f7ff fd90 	bl	8000bb8 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8001098:	2101      	movs	r1, #1
 800109a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800109e:	f7ff fdf7 	bl	8000c90 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); // povolenie update eventu
 80010a2:	2201      	movs	r2, #1
 80010a4:	2101      	movs	r1, #1
 80010a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010aa:	f7ff fe11 	bl	8000cd0 <TIM_ITConfig>

    NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 80010ae:	231c      	movs	r3, #28
 80010b0:	723b      	strb	r3, [r7, #8]
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	727b      	strb	r3, [r7, #9]
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	72bb      	strb	r3, [r7, #10]
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80010ba:	2301      	movs	r3, #1
 80010bc:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&nvicStructure);
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f880 	bl	80001c8 <NVIC_Init>

    return;
 80010c8:	bf00      	nop
}
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 80010d6:	2101      	movs	r1, #1
 80010d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010dc:	f7ff fe1c 	bl	8000d18 <TIM_GetITStatus>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	bf14      	ite	ne
 80010e6:	2301      	movne	r3, #1
 80010e8:	2300      	moveq	r3, #0
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d058      	beq.n	80011a2 <TIM2_IRQHandler+0xd2>

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80010f0:	2101      	movs	r1, #1
 80010f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010f6:	f7ff fe39 	bl	8000d6c <TIM_ClearITPendingBit>

		// najprv sa posle x potom y
		for (int j=0; j<2; j++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b01      	cmp	r3, #1
 8001102:	dc4e      	bgt.n	80011a2 <TIM2_IRQHandler+0xd2>

			// konverzia hodnoty z ADC na pole charov, funkcia vracia smernik
			char_pointer = INTconversionCHAR(ADC_Values[j]);
 8001104:	4a29      	ldr	r2, [pc, #164]	; (80011ac <TIM2_IRQHandler+0xdc>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f855 	bl	80011bc <_Z17INTconversionCHARh>
 8001112:	4602      	mov	r2, r0
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <TIM2_IRQHandler+0xe0>)
 8001116:	601a      	str	r2, [r3, #0]

			i = *(char_pointer); // na 1. mieste je pocet cifier
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <TIM2_IRQHandler+0xe0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <TIM2_IRQHandler+0xe4>)
 8001122:	601a      	str	r2, [r3, #0]
			while (i>0) {
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <TIM2_IRQHandler+0xe4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	dd1d      	ble.n	8001168 <TIM2_IRQHandler+0x98>
				while (USART_GetFlagStatus(USART1,USART_FLAG_TXE)==0) {};
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	4822      	ldr	r0, [pc, #136]	; (80011b8 <TIM2_IRQHandler+0xe8>)
 8001130:	f7ff ff62 	bl	8000ff8 <USART_GetFlagStatus>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf0c      	ite	eq
 800113a:	2301      	moveq	r3, #1
 800113c:	2300      	movne	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d000      	beq.n	8001146 <TIM2_IRQHandler+0x76>
 8001144:	e7f2      	b.n	800112c <TIM2_IRQHandler+0x5c>
				USART_SendData(USART1,*(char_pointer+i));
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <TIM2_IRQHandler+0xe0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <TIM2_IRQHandler+0xe4>)
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	4413      	add	r3, r2
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4619      	mov	r1, r3
 8001156:	4818      	ldr	r0, [pc, #96]	; (80011b8 <TIM2_IRQHandler+0xe8>)
 8001158:	f7ff fef4 	bl	8000f44 <USART_SendData>
				i--;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <TIM2_IRQHandler+0xe4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <TIM2_IRQHandler+0xe4>)
 8001164:	6013      	str	r3, [r2, #0]

			// konverzia hodnoty z ADC na pole charov, funkcia vracia smernik
			char_pointer = INTconversionCHAR(ADC_Values[j]);

			i = *(char_pointer); // na 1. mieste je pocet cifier
			while (i>0) {
 8001166:	e7dd      	b.n	8001124 <TIM2_IRQHandler+0x54>
				USART_SendData(USART1,*(char_pointer+i));
				i--;
			}

			// najprv space a pootm new line
			while (USART_GetFlagStatus(USART1,USART_FLAG_TXE)==0) {};
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	4813      	ldr	r0, [pc, #76]	; (80011b8 <TIM2_IRQHandler+0xe8>)
 800116c:	f7ff ff44 	bl	8000ff8 <USART_GetFlagStatus>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	bf0c      	ite	eq
 8001176:	2301      	moveq	r3, #1
 8001178:	2300      	movne	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d000      	beq.n	8001182 <TIM2_IRQHandler+0xb2>
 8001180:	e7f2      	b.n	8001168 <TIM2_IRQHandler+0x98>
			if (j==0) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d104      	bne.n	8001192 <TIM2_IRQHandler+0xc2>
				USART_SendData(USART1,32);
 8001188:	2120      	movs	r1, #32
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <TIM2_IRQHandler+0xe8>)
 800118c:	f7ff feda 	bl	8000f44 <USART_SendData>
 8001190:	e003      	b.n	800119a <TIM2_IRQHandler+0xca>
			} else {
				USART_SendData(USART1,13);
 8001192:	210d      	movs	r1, #13
 8001194:	4808      	ldr	r0, [pc, #32]	; (80011b8 <TIM2_IRQHandler+0xe8>)
 8001196:	f7ff fed5 	bl	8000f44 <USART_SendData>
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);

		// najprv sa posle x potom y
		for (int j=0; j<2; j++) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3301      	adds	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	e7ad      	b.n	80010fe <TIM2_IRQHandler+0x2e>
		USART_SendData(USART1,ADC_Values[1]);
		*/

	}

	return;
 80011a2:	bf00      	nop
}
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000010 	.word	0x20000010
 80011b0:	20000044 	.word	0x20000044
 80011b4:	20000048 	.word	0x20000048
 80011b8:	40011000 	.word	0x40011000

080011bc <_Z17INTconversionCHARh>:

char *INTconversionCHAR(uint8_t value) {
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]

	// funkcia vracia smernik na pole

	int j = 1; // index pola, zacina na 1
 80011c6:	2301      	movs	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
	static char char_array[4]; // pole, na 1. mieste pocet cifier hodnoty z ADC (1-3)

	do {
		*(char_array+j) = (char)(value % 10) + '0'; // konverzia z INT na CHAR
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_Z17INTconversionCHARh+0x64>)
 80011ce:	1898      	adds	r0, r3, r2
 80011d0:	79fa      	ldrb	r2, [r7, #7]
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <_Z17INTconversionCHARh+0x68>)
 80011d4:	fba3 1302 	umull	r1, r3, r3, r2
 80011d8:	08d9      	lsrs	r1, r3, #3
 80011da:	460b      	mov	r3, r1
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	3330      	adds	r3, #48	; 0x30
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	7003      	strb	r3, [r0, #0]
		value /= 10;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <_Z17INTconversionCHARh+0x68>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	71fb      	strb	r3, [r7, #7]
		j++;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
	// funkcia vracia smernik na pole

	int j = 1; // index pola, zacina na 1
	static char char_array[4]; // pole, na 1. mieste pocet cifier hodnoty z ADC (1-3)

	do {
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d000      	beq.n	8001206 <_Z17INTconversionCHARh+0x4a>
 8001204:	e7e1      	b.n	80011ca <_Z17INTconversionCHARh+0xe>
		*(char_array+j) = (char)(value % 10) + '0'; // konverzia z INT na CHAR
		value /= 10;
		j++;
	} while (value);

	*(char_array) = j-1; // teraz uz vieme pocet cifier, zapis na 1. miesto v poli
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b01      	subs	r3, #1
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <_Z17INTconversionCHARh+0x64>)
 8001210:	701a      	strb	r2, [r3, #0]

	return char_array;
 8001212:	4b03      	ldr	r3, [pc, #12]	; (8001220 <_Z17INTconversionCHARh+0x64>)
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	2000004c 	.word	0x2000004c
 8001224:	cccccccd 	.word	0xcccccccd

08001228 <_Z9initUSARTv>:

void initUSART(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0

	 /* enable APB2 peripheral clock for USART1
	  * note that only USART1 and USART6 are connected to APB2
	  * the other USARTs are connected to APB1
	  */
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800122e:	2101      	movs	r1, #1
 8001230:	2010      	movs	r0, #16
 8001232:	f7ff fc47 	bl	8000ac4 <RCC_APB2PeriphClockCmd>

	 /* enable the peripheral clock for the pins used by
	  * USART1, PB6 for TX and PB7 for RX
	  */
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001236:	2101      	movs	r1, #1
 8001238:	2002      	movs	r0, #2
 800123a:	f7ff fc03 	bl	8000a44 <RCC_AHB1PeriphClockCmd>

	 /* This sequence sets up the TX and RX pins
	  * so they work correctly with the USART1 peripheral
	  */
	 GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pins 6 (TX) and 7 (RX) are used
 800123e:	23c0      	movs	r3, #192	; 0xc0
 8001240:	61bb      	str	r3, [r7, #24]
	 GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			 // the pins are configured as alternate function so the USART peripheral has access to them
 8001242:	2302      	movs	r3, #2
 8001244:	773b      	strb	r3, [r7, #28]
	 GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		 // this defines the IO speed and has nothing to do with the baudrate!
 8001246:	2302      	movs	r3, #2
 8001248:	777b      	strb	r3, [r7, #29]
	 GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;		 // this defines the output type as push pull mode (as opposed to open drain)
 800124a:	2300      	movs	r3, #0
 800124c:	77bb      	strb	r3, [r7, #30]
	 GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			 // this activates the pullup resistors on the IO pins
 800124e:	2301      	movs	r3, #1
 8001250:	77fb      	strb	r3, [r7, #31]
	 GPIO_Init(GPIOB, &GPIO_InitStruct);				 // now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	4619      	mov	r1, r3
 8001258:	481c      	ldr	r0, [pc, #112]	; (80012cc <_Z9initUSARTv+0xa4>)
 800125a:	f7ff fa45 	bl	80006e8 <GPIO_Init>

	 /* The RX and TX pins are now connected to their AF
	  * so that the USART1 can take over control of the
	  * pins
	  */
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 800125e:	2207      	movs	r2, #7
 8001260:	2106      	movs	r1, #6
 8001262:	481a      	ldr	r0, [pc, #104]	; (80012cc <_Z9initUSARTv+0xa4>)
 8001264:	f7ff face 	bl	8000804 <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8001268:	2207      	movs	r2, #7
 800126a:	2107      	movs	r1, #7
 800126c:	4817      	ldr	r0, [pc, #92]	; (80012cc <_Z9initUSARTv+0xa4>)
 800126e:	f7ff fac9 	bl	8000804 <GPIO_PinAFConfig>

	 /* Now the USART_InitStruct is used to define the
	  * properties of USART1
	  */
	 USART_InitStruct.USART_BaudRate = 9600;				 // the baudrate is set to the value we passed into this init function
 8001272:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001276:	60bb      	str	r3, [r7, #8]
	 USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8001278:	2300      	movs	r3, #0
 800127a:	81bb      	strh	r3, [r7, #12]
	 USART_InitStruct.USART_StopBits = USART_StopBits_1;	 // we want 1 stop bit (standard)
 800127c:	2300      	movs	r3, #0
 800127e:	81fb      	strh	r3, [r7, #14]
	 USART_InitStruct.USART_Parity = USART_Parity_No;		 // we don't want a parity bit (standard)
 8001280:	2300      	movs	r3, #0
 8001282:	823b      	strh	r3, [r7, #16]
	 USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8001284:	2300      	movs	r3, #0
 8001286:	82bb      	strh	r3, [r7, #20]
	 USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8001288:	230c      	movs	r3, #12
 800128a:	827b      	strh	r3, [r7, #18]
	 USART_Init(USART1, &USART_InitStruct);					 // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	480f      	ldr	r0, [pc, #60]	; (80012d0 <_Z9initUSARTv+0xa8>)
 8001294:	f7ff fd7c 	bl	8000d90 <USART_Init>
	 /* Here the USART1 receive interrupt is enabled
	  * and the interrupt controller is configured
	  * to jump to the USART1_IRQHandler() function
	  * if the USART1 receive interrupt occurs
	  */
	 USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 8001298:	2201      	movs	r2, #1
 800129a:	f240 5125 	movw	r1, #1317	; 0x525
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <_Z9initUSARTv+0xa8>)
 80012a0:	f7ff fe62 	bl	8000f68 <USART_ITConfig>

	 NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		  // we want to configure the USART1 interrupts
 80012a4:	2325      	movs	r3, #37	; 0x25
 80012a6:	713b      	strb	r3, [r7, #4]
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 8; // this sets the priority group of the USART1 interrupts
 80012a8:	2308      	movs	r3, #8
 80012aa:	717b      	strb	r3, [r7, #5]
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		  // this sets the subpriority inside the group
 80012ac:	2300      	movs	r3, #0
 80012ae:	71bb      	strb	r3, [r7, #6]
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			  // the USART1 interrupts are globally enabled
 80012b0:	2301      	movs	r3, #1
 80012b2:	71fb      	strb	r3, [r7, #7]
	 NVIC_Init(&NVIC_InitStructure);							  // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7fe ff86 	bl	80001c8 <NVIC_Init>

	 // finally this enables the complete USART1 peripheral
	 USART_Cmd(USART1, ENABLE);
 80012bc:	2101      	movs	r1, #1
 80012be:	4804      	ldr	r0, [pc, #16]	; (80012d0 <_Z9initUSARTv+0xa8>)
 80012c0:	f7ff fe20 	bl	8000f04 <USART_Cmd>

	 return;
 80012c4:	bf00      	nop
}
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40011000 	.word	0x40011000

080012d4 <_Z14initADCwithDMAv>:

void initADCwithDMA(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b09c      	sub	sp, #112	; 0x70
 80012d8:	af00      	add	r7, sp, #0
    ADC_CommonInitTypeDef ADC_CommonInitStruct;
    DMA_InitTypeDef       DMA_InitStruct;
    GPIO_InitTypeDef      GPIO_InitStruct;

    // Enable DMA2 clocks
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80012da:	2101      	movs	r1, #1
 80012dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80012e0:	f7ff fbb0 	bl	8000a44 <RCC_AHB1PeriphClockCmd>
    // Enable GPIOC clocks
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80012e4:	2101      	movs	r1, #1
 80012e6:	2004      	movs	r0, #4
 80012e8:	f7ff fbac 	bl	8000a44 <RCC_AHB1PeriphClockCmd>
    // Enable ADC1 clocks
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80012ec:	2101      	movs	r1, #1
 80012ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012f2:	f7ff fbe7 	bl	8000ac4 <RCC_APB2PeriphClockCmd>
    //RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOCEN, ENABLE);

    // DMA2 Stream0 channel0 configuration
    DMA_InitStruct.DMA_Channel = DMA_Channel_0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
    DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR; // ADC1's data register
 80012fa:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <_Z14initADCwithDMAv+0x11c>)
 80012fc:	613b      	str	r3, [r7, #16]
    DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&ADC_Values;
 80012fe:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <_Z14initADCwithDMAv+0x120>)
 8001300:	617b      	str	r3, [r7, #20]
    DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
    DMA_InitStruct.DMA_BufferSize = 2;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
    DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
    DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800130e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; // Reads 8 bit values
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte; // Stores 8 bit values
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;
 800131c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
    DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 8001322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
    DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001328:	2300      	movs	r3, #0
 800132a:	63bb      	str	r3, [r7, #56]	; 0x38
    DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800132c:	2301      	movs	r3, #1
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
    DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001330:	2300      	movs	r3, #0
 8001332:	643b      	str	r3, [r7, #64]	; 0x40
    DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001334:	2300      	movs	r3, #0
 8001336:	647b      	str	r3, [r7, #68]	; 0x44
    DMA_Init(DMA2_Stream0, &DMA_InitStruct);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4619      	mov	r1, r3
 800133e:	482e      	ldr	r0, [pc, #184]	; (80013f8 <_Z14initADCwithDMAv+0x124>)
 8001340:	f7ff f95e 	bl	8000600 <DMA_Init>
    DMA_Cmd(DMA2_Stream0, ENABLE);
 8001344:	2101      	movs	r1, #1
 8001346:	482c      	ldr	r0, [pc, #176]	; (80013f8 <_Z14initADCwithDMAv+0x124>)
 8001348:	f7ff f9b2 	bl	80006b0 <DMA_Cmd>

    // Configure GPIO pins
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // PC0 - Channel 10, PC1 - Channel 11
 800134c:	2303      	movs	r3, #3
 800134e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN; // The pins are configured in analog mode
 8001350:	2303      	movs	r3, #3
 8001352:	723b      	strb	r3, [r7, #8]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL; // We don't need any pull up or pull down
 8001354:	2300      	movs	r3, #0
 8001356:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(GPIOC, &GPIO_InitStruct); // Initialize GPIOC pins with the configuration
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	4619      	mov	r1, r3
 800135c:	4827      	ldr	r0, [pc, #156]	; (80013fc <_Z14initADCwithDMAv+0x128>)
 800135e:	f7ff f9c3 	bl	80006e8 <GPIO_Init>

    // ADC Common Init
    ADC_CommonInitStruct.ADC_Mode = ADC_Mode_Independent;
 8001362:	2300      	movs	r3, #0
 8001364:	64bb      	str	r3, [r7, #72]	; 0x48
    ADC_CommonInitStruct.ADC_Prescaler = ADC_Prescaler_Div2;
 8001366:	2300      	movs	r3, #0
 8001368:	64fb      	str	r3, [r7, #76]	; 0x4c
    ADC_CommonInitStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 800136a:	2300      	movs	r3, #0
 800136c:	653b      	str	r3, [r7, #80]	; 0x50
    ADC_CommonInitStruct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800136e:	2300      	movs	r3, #0
 8001370:	657b      	str	r3, [r7, #84]	; 0x54
    ADC_CommonInit(&ADC_CommonInitStruct);
 8001372:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ffec 	bl	8000354 <ADC_CommonInit>

    // ADC1 Init
    ADC_DeInit();
 800137c:	f7fe ff86 	bl	800028c <ADC_DeInit>
    ADC_InitStruct.ADC_Resolution = ADC_Resolution_8b; // Input voltage is converted into a 8bit int (max 255)
 8001380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001384:	65bb      	str	r3, [r7, #88]	; 0x58
    ADC_InitStruct.ADC_ScanConvMode = ENABLE; // The scan is configured in multiple channels
 8001386:	2301      	movs	r3, #1
 8001388:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    ADC_InitStruct.ADC_ContinuousConvMode = ENABLE; // Continuous conversion: input signal is sampled more than once
 800138c:	2301      	movs	r3, #1
 800138e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    ADC_InitStruct.ADC_ExternalTrigConv = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	667b      	str	r3, [r7, #100]	; 0x64
    ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001396:	2300      	movs	r3, #0
 8001398:	663b      	str	r3, [r7, #96]	; 0x60
    ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right; // Data converted will be shifted to right
 800139a:	2300      	movs	r3, #0
 800139c:	66bb      	str	r3, [r7, #104]	; 0x68
    ADC_InitStruct.ADC_NbrOfConversion = 2;
 800139e:	2302      	movs	r3, #2
 80013a0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    ADC_Init(ADC1, &ADC_InitStruct); // Initialize ADC with the configuration
 80013a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a8:	4619      	mov	r1, r3
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <_Z14initADCwithDMAv+0x12c>)
 80013ac:	f7fe ff7c 	bl	80002a8 <ADC_Init>

    // Select the channels to be read from
    ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_144Cycles); // PC0
 80013b0:	2306      	movs	r3, #6
 80013b2:	2201      	movs	r2, #1
 80013b4:	210a      	movs	r1, #10
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <_Z14initADCwithDMAv+0x12c>)
 80013b8:	f7ff f810 	bl	80003dc <ADC_RegularChannelConfig>
    ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 2, ADC_SampleTime_144Cycles); // PC1
 80013bc:	2306      	movs	r3, #6
 80013be:	2202      	movs	r2, #2
 80013c0:	210b      	movs	r1, #11
 80013c2:	480f      	ldr	r0, [pc, #60]	; (8001400 <_Z14initADCwithDMAv+0x12c>)
 80013c4:	f7ff f80a 	bl	80003dc <ADC_RegularChannelConfig>

    // Enable DMA request after last transfer (Single-ADC mode)
    ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 80013c8:	2101      	movs	r1, #1
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <_Z14initADCwithDMAv+0x12c>)
 80013cc:	f7ff f8fc 	bl	80005c8 <ADC_DMARequestAfterLastTransferCmd>
    // Enable ADC1 DMA
    ADC_DMACmd(ADC1, ENABLE);
 80013d0:	2101      	movs	r1, #1
 80013d2:	480b      	ldr	r0, [pc, #44]	; (8001400 <_Z14initADCwithDMAv+0x12c>)
 80013d4:	f7ff f8dc 	bl	8000590 <ADC_DMACmd>
    // Enable ADC1
    ADC_Cmd(ADC1, ENABLE);
 80013d8:	2101      	movs	r1, #1
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <_Z14initADCwithDMAv+0x12c>)
 80013dc:	f7fe ffe2 	bl	80003a4 <ADC_Cmd>
    // Start ADC1 Software Conversion
    ADC_SoftwareStartConv(ADC1);
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <_Z14initADCwithDMAv+0x12c>)
 80013e2:	f7ff f8c5 	bl	8000570 <ADC_SoftwareStartConv>

    return;
 80013e6:	bf00      	nop
}
 80013e8:	3770      	adds	r7, #112	; 0x70
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	4001204c 	.word	0x4001204c
 80013f4:	20000010 	.word	0x20000010
 80013f8:	40026410 	.word	0x40026410
 80013fc:	40020800 	.word	0x40020800
 8001400:	40012000 	.word	0x40012000

08001404 <main>:
**  Abstract: main program
**
**===========================================================================
*/

int main(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

	initSYSTEMCLOCK();
 8001408:	f7ff fe12 	bl	8001030 <_Z15initSYSTEMCLOCKv>

	initUSART();
 800140c:	f7ff ff0c 	bl	8001228 <_Z9initUSARTv>
	initTIMERwithINTERRUPT(100); // TIM2, param: hodnota resetu v ms
 8001410:	2064      	movs	r0, #100	; 0x64
 8001412:	f7ff fe25 	bl	8001060 <_Z22initTIMERwithINTERRUPTt>

	initADCwithDMA();
 8001416:	f7ff ff5d 	bl	80012d4 <_Z14initADCwithDMAv>

	while (1) {
 800141a:	e7fe      	b.n	800141a <main+0x16>

0800141c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001422:	e003      	b.n	800142c <LoopCopyDataInit>

08001424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800142a:	3104      	adds	r1, #4

0800142c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001434:	d3f6      	bcc.n	8001424 <CopyDataInit>
  ldr  r2, =_sbss
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001438:	e002      	b.n	8001440 <LoopFillZerobss>

0800143a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800143a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800143c:	f842 3b04 	str.w	r3, [r2], #4

08001440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001444:	d3f9      	bcc.n	800143a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001446:	f000 f84b 	bl	80014e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144a:	f000 f979 	bl	8001740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144e:	f7ff ffd9 	bl	8001404 <main>
  bx  lr    
 8001452:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001454:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001458:	080017ac 	.word	0x080017ac
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001460:	20000028 	.word	0x20000028
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001464:	20000028 	.word	0x20000028
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001468:	20000050 	.word	0x20000050

0800146c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC_IRQHandler>
	...

08001470 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001484:	e7fe      	b.n	8001484 <HardFault_Handler+0x4>
 8001486:	bf00      	nop

08001488 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>
 800148e:	bf00      	nop

08001490 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001494:	e7fe      	b.n	8001494 <BusFault_Handler+0x4>
 8001496:	bf00      	nop

08001498 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>
 800149e:	bf00      	nop

080014a0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop

080014d0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4a16      	ldr	r2, [pc, #88]	; (8001540 <SystemInit+0x60>)
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <SystemInit+0x60>)
 80014e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <SystemInit+0x64>)
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <SystemInit+0x64>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <SystemInit+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001506:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <SystemInit+0x64>)
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <SystemInit+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <SystemInit+0x64>)
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <SystemInit+0x68>)
 800151a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800151c:	4a09      	ldr	r2, [pc, #36]	; (8001544 <SystemInit+0x64>)
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <SystemInit+0x64>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001526:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SystemInit+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800152e:	f000 f88b 	bl	8001648 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <SystemInit+0x60>)
 8001534:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001538:	609a      	str	r2, [r3, #8]
#endif
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	40023800 	.word	0x40023800
 8001548:	24003010 	.word	0x24003010

0800154c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	2302      	movs	r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	2302      	movs	r3, #2
 8001564:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <SystemCoreClockUpdate+0xe8>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	2b04      	cmp	r3, #4
 8001574:	d007      	beq.n	8001586 <SystemCoreClockUpdate+0x3a>
 8001576:	2b08      	cmp	r3, #8
 8001578:	d009      	beq.n	800158e <SystemCoreClockUpdate+0x42>
 800157a:	2b00      	cmp	r3, #0
 800157c:	d13f      	bne.n	80015fe <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <SystemCoreClockUpdate+0xec>)
 8001580:	4a2e      	ldr	r2, [pc, #184]	; (800163c <SystemCoreClockUpdate+0xf0>)
 8001582:	601a      	str	r2, [r3, #0]
      break;
 8001584:	e03f      	b.n	8001606 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <SystemCoreClockUpdate+0xec>)
 8001588:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <SystemCoreClockUpdate+0xf4>)
 800158a:	601a      	str	r2, [r3, #0]
      break;
 800158c:	e03b      	b.n	8001606 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <SystemCoreClockUpdate+0xe8>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	0d9b      	lsrs	r3, r3, #22
 8001598:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <SystemCoreClockUpdate+0xe8>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00d      	beq.n	80015c6 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80015aa:	4a25      	ldr	r2, [pc, #148]	; (8001640 <SystemCoreClockUpdate+0xf4>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <SystemCoreClockUpdate+0xe8>)
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ba:	400b      	ands	r3, r1
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	fb03 f302 	mul.w	r3, r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e00c      	b.n	80015e0 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <SystemCoreClockUpdate+0xf0>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <SystemCoreClockUpdate+0xe8>)
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d6:	400b      	ands	r3, r1
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	fb03 f302 	mul.w	r3, r3, r2
 80015de:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <SystemCoreClockUpdate+0xe8>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e8:	0c1b      	lsrs	r3, r3, #16
 80015ea:	3301      	adds	r3, #1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <SystemCoreClockUpdate+0xec>)
 80015fa:	6013      	str	r3, [r2, #0]
      break;
 80015fc:	e003      	b.n	8001606 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <SystemCoreClockUpdate+0xec>)
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <SystemCoreClockUpdate+0xf0>)
 8001602:	601a      	str	r2, [r3, #0]
      break;
 8001604:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <SystemCoreClockUpdate+0xe8>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <SystemCoreClockUpdate+0xf8>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <SystemCoreClockUpdate+0xec>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <SystemCoreClockUpdate+0xec>)
 8001624:	6013      	str	r3, [r2, #0]
}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	20000014 	.word	0x20000014
 800163c:	00f42400 	.word	0x00f42400
 8001640:	017d7840 	.word	0x017d7840
 8001644:	20000018 	.word	0x20000018

08001648 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001656:	4a36      	ldr	r2, [pc, #216]	; (8001730 <SetSysClock+0xe8>)
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <SetSysClock+0xe8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <SetSysClock+0xe8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3301      	adds	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d103      	bne.n	8001680 <SetSysClock+0x38>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800167e:	d1f0      	bne.n	8001662 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <SetSysClock+0xe8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800168c:	2301      	movs	r3, #1
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	e001      	b.n	8001696 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d142      	bne.n	8001722 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800169c:	4a24      	ldr	r2, [pc, #144]	; (8001730 <SetSysClock+0xe8>)
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <SetSysClock+0xe8>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80016a8:	4a22      	ldr	r2, [pc, #136]	; (8001734 <SetSysClock+0xec>)
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <SetSysClock+0xec>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016b2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <SetSysClock+0xe8>)
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <SetSysClock+0xe8>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80016bc:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <SetSysClock+0xe8>)
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <SetSysClock+0xe8>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <SetSysClock+0xe8>)
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <SetSysClock+0xe8>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80016d2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <SetSysClock+0xe8>)
 80016d6:	4a18      	ldr	r2, [pc, #96]	; (8001738 <SetSysClock+0xf0>)
 80016d8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80016da:	4a15      	ldr	r2, [pc, #84]	; (8001730 <SetSysClock+0xe8>)
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <SetSysClock+0xe8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80016e6:	bf00      	nop
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <SetSysClock+0xe8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f9      	beq.n	80016e8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <SetSysClock+0xf4>)
 80016f6:	f240 7205 	movw	r2, #1797	; 0x705
 80016fa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <SetSysClock+0xe8>)
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <SetSysClock+0xe8>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f023 0303 	bic.w	r3, r3, #3
 8001706:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001708:	4a09      	ldr	r2, [pc, #36]	; (8001730 <SetSysClock+0xe8>)
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <SetSysClock+0xe8>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001714:	bf00      	nop
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <SetSysClock+0xe8>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b08      	cmp	r3, #8
 8001720:	d1f9      	bne.n	8001716 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000
 8001738:	07405419 	.word	0x07405419
 800173c:	40023c00 	.word	0x40023c00

08001740 <__libc_init_array>:
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <__libc_init_array+0x3c>)
 8001744:	4c0e      	ldr	r4, [pc, #56]	; (8001780 <__libc_init_array+0x40>)
 8001746:	1ae4      	subs	r4, r4, r3
 8001748:	10a4      	asrs	r4, r4, #2
 800174a:	2500      	movs	r5, #0
 800174c:	461e      	mov	r6, r3
 800174e:	42a5      	cmp	r5, r4
 8001750:	d004      	beq.n	800175c <__libc_init_array+0x1c>
 8001752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001756:	4798      	blx	r3
 8001758:	3501      	adds	r5, #1
 800175a:	e7f8      	b.n	800174e <__libc_init_array+0xe>
 800175c:	f000 f816 	bl	800178c <_init>
 8001760:	4c08      	ldr	r4, [pc, #32]	; (8001784 <__libc_init_array+0x44>)
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <__libc_init_array+0x48>)
 8001764:	1ae4      	subs	r4, r4, r3
 8001766:	10a4      	asrs	r4, r4, #2
 8001768:	2500      	movs	r5, #0
 800176a:	461e      	mov	r6, r3
 800176c:	42a5      	cmp	r5, r4
 800176e:	d004      	beq.n	800177a <__libc_init_array+0x3a>
 8001770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001774:	4798      	blx	r3
 8001776:	3501      	adds	r5, #1
 8001778:	e7f8      	b.n	800176c <__libc_init_array+0x2c>
 800177a:	bd70      	pop	{r4, r5, r6, pc}
 800177c:	080017a4 	.word	0x080017a4
 8001780:	080017a4 	.word	0x080017a4
 8001784:	080017a8 	.word	0x080017a8
 8001788:	080017a4 	.word	0x080017a4

0800178c <_init>:
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178e:	bf00      	nop
 8001790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001792:	bc08      	pop	{r3}
 8001794:	469e      	mov	lr, r3
 8001796:	4770      	bx	lr

08001798 <_fini>:
 8001798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179a:	bf00      	nop
 800179c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179e:	bc08      	pop	{r3}
 80017a0:	469e      	mov	lr, r3
 80017a2:	4770      	bx	lr
